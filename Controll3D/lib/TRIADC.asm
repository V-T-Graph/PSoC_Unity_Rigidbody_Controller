;;*****************************************************************************
;;*****************************************************************************
;;  FILENAME:   TRIADC.asm
;;  Version: 2.20, Updated on 2012/9/21 at 11:59:44
;;  Generated by PSoC Designer 5.3.2710
;;
;;  DESCRIPTION: TriADC User Module software implementation file.
;;
;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
;;        arguments and observe the associated "Registers are volatile" policy.
;;        This means it is the caller's responsibility to preserve any values
;;        in the X and A registers that are still needed after the API functions
;;        returns. For Large Memory Model devices it is also the caller's 
;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
;;        MVW_PP registers. Even though some of these registers may not be modified
;;        now, there is no guarantee that will remain the case in future releases.
;;-----------------------------------------------------------------------------
;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
;;*****************************************************************************
;;*****************************************************************************

include "TRIADC.inc"
include "m8c.inc"
include "memory.inc"

;-----------------------------------------------
;  Global Symbols
;-----------------------------------------------
export  TRIADC_Start
export _TRIADC_Start
export  TRIADC_SetPower
export _TRIADC_SetPower
export  TRIADC_Stop
export _TRIADC_Stop
export  TRIADC_GetSamples
export _TRIADC_GetSamples
export  TRIADC_StopAD
export _TRIADC_StopAD
export  TRIADC_fIsData
export _TRIADC_fIsData
export  TRIADC_fIsDataAvailable
export _TRIADC_fIsDataAvailable
export  TRIADC_iGetData1
export _TRIADC_iGetData1
export  TRIADC_iGetData2
export _TRIADC_iGetData2
export  TRIADC_iGetData3
export _TRIADC_iGetData3
export  TRIADC_ClearFlag
export _TRIADC_ClearFlag
export  TRIADC_iGetData1ClearFlag
export _TRIADC_iGetData1ClearFlag
export  TRIADC_iGetData2ClearFlag
export _TRIADC_iGetData2ClearFlag
export  TRIADC_iGetData3ClearFlag
export _TRIADC_iGetData3ClearFlag
export  TRIADC_SetResolution
export _TRIADC_SetResolution

;-----------------------------------------------
;  EQUATES
;-----------------------------------------------
; Calctime parameters
wCalcTime:     equ   TRIADC_bCALCTIME

; Constants
LowByte:       equ 1
HighByte:      equ 0

AREA UserModules (ROM, REL)
.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: TRIADC_Start
;  FUNCTION NAME: TRIADC_SetPower
;
;  DESCRIPTION:
;     Applies power setting to the module's analog PSoc block.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:
;    A contains the power setting (0 - 3)
;
;  RETURNS: none
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;    Currently only the page pointer registers listed below are modified: 
;          CUR_PP
;
 TRIADC_Start:
_TRIADC_Start:
 TRIADC_SetPower:
_TRIADC_SetPower:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_PROLOGUE RAM_USE_CLASS_2
   RAM_SETPAGE_CUR >TRIADC_bfStatus
   and   A,TRIADC_bfPOWERMASK                        ; Mask only the valid power setting bits
   mov   X, SP                                       ; Get location of next location on stack
   push  A                                           ; Save power value on temp location

                                                     ; Set power for ADC1
   mov   A, reg[TRIADC_bfADC1cr3]                    ; Get current value of ADC1cr3
   and   A, ~TRIADC_bfPOWERMASK                      ; Mask off old power value
   or    A, [X]                                      ; OR in new power value
   or    A, f0h                                      ; Make sure other register is set correctly
   mov   reg[TRIADC_bfADC1cr3], A                    ; Reload CR with new power value

                                                     ; Set power for ADC2
   mov   A, reg[TRIADC_bfADC2cr3]                    ; Get current value of ADC2cr3
   and   A, ~TRIADC_bfPOWERMASK                      ; Mask off old power value
   or    A, [X]                                      ; OR in new power value
   or    A, f0h                                      ; Make sure other register is set correctly
   mov   reg[TRIADC_bfADC2cr3], A                    ; Reload CR with new power value

                                                     ; Set power for ADC3
   mov   A, reg[TRIADC_bfADC3cr3]                    ; Get current value of ADC3cr3
   and   A, ~TRIADC_bfPOWERMASK                      ; Mask off old power value
   or    A, [X]                                      ; OR in new power value
   or    A, f0h                                      ; Make sure other register is set correctly
   mov   reg[TRIADC_bfADC3cr3], A                    ; Reload CR with new power value

   tst   reg[TRIADC_bfADC1cr2], TRIADC_fRES_SET
   jz    .DoNotLoadRes
   mov   A,TRIADC_bNUMBITS - TRIADC_bMINRES                     ; get and set the resolution
   mov   [TRIADC_bfStatus], A              ; place it in the status variable
.DoNotLoadRes:

   pop   A                                           ; Restore the stack and power value
   RAM_EPILOGUE RAM_USE_CLASS_2
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: TRIADC_Stop
;
;  DESCRIPTION:
;    Removes power from the module's analog PSoc block, but the digital
;    blocks keep on running.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:  none
;
;  RETURNS:  none
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 TRIADC_Stop:
_TRIADC_Stop:
   RAM_PROLOGUE RAM_USE_CLASS_1
   and   reg[TRIADC_bfADC1cr3], ~TRIADC_bfPOWERMASK
   and   reg[TRIADC_bfADC2cr3], ~TRIADC_bfPOWERMASK
   and   reg[TRIADC_bfADC3cr3], ~TRIADC_bfPOWERMASK
   RAM_EPILOGUE RAM_USE_CLASS_1
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: TRIADC_Get_Samples
;
;  DESCRIPTION:
;    Starts the A/D convertor and will place data is memory.  A flag
;    is set whenever a new data value is available.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:
;    A Contains the number of samples to perform. (0 is continous)
;
;  RETURNS: none
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;    Currently only the page pointer registers listed below are modified: 
;          CUR_PP
;
 TRIADC_GetSamples:
_TRIADC_GetSamples:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >TRIADC_bSampC
   mov   [TRIADC_bSampC], A                                ; Store sample count

   mov   A,[TRIADC_bfStatus]                               ; get and set the resolution
   and   A,TRIADC_bRES_MASK
   add   A,TRIADC_bMINRES
   call  TRIADC_SetResolution

TRIADC_LoadMSBCounter:                                     ; The PWM has been setup by SetResolution, now set the upper
                                                           ; counter which will be the same as the period.
                                                           ; Reset MSB of counter to most negative value
   RAM_SETPAGE_CUR >TRIADC_cCounter1U
   mov   A,reg[TRIADC_bPWM_IntTime_MSB]                    ; Get MSB of PWM and move it into RAM
   mov   [TRIADC_cCounter1U], A                            ; Use counter as temp location
   mov   A, 00h                                            ; Load A with zero for the calculation
   sub   A, [TRIADC_cCounter1U]                            ; 0 - MSB_PWM = MSB_of_most_neg_value
   asr   A                                                 ; Half the range (+ and -)
IF (TRIADC_DATA_FORMAT)
   mov   [TRIADC_cCounter1U], A                            ; Place result back into MSB of counter1
   mov   [TRIADC_cCounter2U], A                            ; Place result back into MSB of counter2
   mov   [TRIADC_cCounter3U], A                            ; Place result back into MSB of counter3
ELSE
   mov   [TRIADC_cCounter1U], 00h                          ; Always start at zero for unsigned values for ADC1
   mov   [TRIADC_cCounter2U], 00h                          ; Always start at zero for unsigned values for ADC2
   mov   [TRIADC_cCounter3U], 00h                          ; Always start at zero for unsigned values for ADC3
ENDIF
   mov   A, reg[TRIADC_bPWM_IntTime_LSB]                   ; Dummy Read  - required do not remove
   mov   reg[TRIADC_bPeriod1], FFh                         ; Make sure counter1 starts at FF
   mov   reg[TRIADC_bPeriod2], FFh                         ; Make sure counter1 starts at FF
   mov   reg[TRIADC_bPeriod3], FFh                         ; Make sure counter1 starts at FF

   and   reg[TRIADC_bfADC1cr3],~TRIADC_fFSW0               ; Take Integrator out of reset
   and   reg[TRIADC_bfADC2cr3],~TRIADC_fFSW0               ; Take Integrator out of reset
   and   reg[TRIADC_bfADC3cr3],~TRIADC_fFSW0               ; Take Integrator out of reset
IF TRIADC_NoAZ
    and  reg[TRIADC_bfADC1cr2],~TRIADC_fAutoZero           ; Take Integrator out of AutoZero
    and  reg[TRIADC_bfADC2cr2],~TRIADC_fAutoZero           ; Take Integrator out of AutoZero
    and  reg[TRIADC_bfADC3cr2],~TRIADC_fAutoZero           ; Take Integrator out of AutoZero
ENDIF

                                                               ; Enable the A/D and Start it!
   or    reg[TRIADC_bCounter1_CR0], (TRIADC_fDBLK_ENABLE|TRIADC_fPULSE_WIDE)   ; Enable the Counter
   or    reg[TRIADC_bCounter2_CR0], (TRIADC_fDBLK_ENABLE|TRIADC_fPULSE_WIDE)   ; Enable the Counter
   or    reg[TRIADC_bCounter3_CR0], (TRIADC_fDBLK_ENABLE|TRIADC_fPULSE_WIDE)   ; Enable the Counter
   or    reg[TRIADC_fPWM_LSB_CR0], TRIADC_fDBLK_ENABLE         ; Enable PWM
   or    reg[TRIADC_bfPWM16_INT_REG], TRIADC_bfPWM16_Mask      ; Enable PWM and Counter interrupts
   or    reg[TRIADC_bfCounter1_INT_REG], TRIADC_bfCounter1_Mask
   or    reg[TRIADC_bfCounter2_INT_REG], TRIADC_bfCounter2_Mask
   or    reg[TRIADC_bfCounter3_INT_REG], TRIADC_bfCounter3_Mask
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: TRIADC_StopAD
;
;  DESCRIPTION:
;    Completely shuts down the A/D is an orderly manner.  Both the
;    Timer and Counter are disabled and their interrupts are deactivated.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS: none
;
;  RETURNS: none
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 TRIADC_StopAD:
_TRIADC_StopAD:
   RAM_PROLOGUE RAM_USE_CLASS_1
   and   reg[TRIADC_fPWM_LSB_CR0], ~TRIADC_fDBLK_ENABLE        ; Disable the PWM

   and   reg[TRIADC_bCounter1_CR0], ~TRIADC_fDBLK_ENABLE           ; Disable the Counter
   and   reg[TRIADC_bCounter2_CR0], ~TRIADC_fDBLK_ENABLE           ; Disable the Counter
   and   reg[TRIADC_bCounter3_CR0], ~TRIADC_fDBLK_ENABLE           ; Disable the Counter

IF TRIADC_NoAZ
   or    reg[TRIADC_bfADC1cr2], TRIADC_fAutoZero               ; Put the Integrator into Autozero mode
   or    reg[TRIADC_bfADC2cr2], TRIADC_fAutoZero               ; Put the Integrator into Autozero mode
   or    reg[TRIADC_bfADC3cr2], TRIADC_fAutoZero               ; Put the Integrator into Autozero mode
ENDIF

   or   reg[TRIADC_bfADC1cr3], TRIADC_fFSW0                    ; Put Integrator into reset
   or   reg[TRIADC_bfADC2cr3], TRIADC_fFSW0                    ; Put Integrator into reset
   or   reg[TRIADC_bfADC3cr3], TRIADC_fFSW0                    ; Put Integrator into reset

   push A
   M8C_DisableIntMask TRIADC_bfPWM16_INT_REG, TRIADC_bfPWM16_Mask      ; Disable interrupts
   M8C_DisableIntMask TRIADC_bfCounter1_INT_REG, TRIADC_bfCounter1_Mask
   M8C_DisableIntMask TRIADC_bfCounter2_INT_REG, TRIADC_bfCounter2_Mask
   M8C_DisableIntMask TRIADC_bfCounter3_INT_REG, TRIADC_bfCounter3_Mask
   pop  A
   RAM_EPILOGUE RAM_USE_CLASS_1
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: TRIADC_fIsData
;  FUNCTION NAME: TRIADC_fIsDataAvailable
;
;  DESCRIPTION:
;    Returns the status of the A/D Data is set whenever a new data value
;    is available.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS: none
;
;  RETURNS: A returns data status in A.  A != 0  Data available
;                                        A  = 0  Data not available
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;    Currently only the page pointer registers listed below are modified: 
;          CUR_PP
;
 TRIADC_fIsData:
_TRIADC_fIsData:
 TRIADC_fIsDataAvailable:
_TRIADC_fIsDataAvailable:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >TRIADC_bfStatus
   mov   A, [TRIADC_bfStatus]                         ; Get status byte
   and   A, TRIADC_fDATA_READY                        ; Mask off other bits
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: TRIADC_iGetData1
;  FUNCTION NAME: TRIADC_iGetData1ClearFlag
;
;  DESCRIPTION:
;    Returns the data from the A/D.  Does not check if data is available.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS: none
;
;  RETURNS:
;     X:A contains 16 bit ADC result.  X = MSB, A = LSB
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;    Currently only the page pointer registers listed below are modified: 
;          CUR_PP
;
 TRIADC_iGetData1ClearFlag:
_TRIADC_iGetData1ClearFlag:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >TRIADC_bfStatus
   and   [TRIADC_bfStatus], ~TRIADC_fDATA_READY  ; Clear Data ready bit
   mov   X, [(TRIADC_iResult1 + HighByte)]
   mov   A, [(TRIADC_iResult1 + LowByte)]
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret

 TRIADC_iGetData1:
_TRIADC_iGetData1:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >TRIADC_bfStatus
   mov   X, [(TRIADC_iResult1 + HighByte)]
   mov   A, [(TRIADC_iResult1 + LowByte)]
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: TRIADC_iGetData2
;  FUNCTION NAME: TRIADC_iGetData2ClearFlag
;
;  DESCRIPTION:
;    Returns the data from the A/D.  Does not check if data is available.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS: none
;
;  RETURNS:
;     X:A contains 16 bit ADC result.  X = MSB, A = LSB
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;    Currently only the page pointer registers listed below are modified: 
;          CUR_PP
;
 TRIADC_iGetData2ClearFlag:
_TRIADC_iGetData2ClearFlag:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >TRIADC_bfStatus
   and   [TRIADC_bfStatus], ~TRIADC_fDATA_READY  ; Clear Data ready bit
   mov   X, [(TRIADC_iResult2 + HighByte)]
   mov   A, [(TRIADC_iResult2 + LowByte)]
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret

 TRIADC_iGetData2:
_TRIADC_iGetData2:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >TRIADC_bfStatus
   mov   X, [(TRIADC_iResult2 + HighByte)]
   mov   A, [(TRIADC_iResult2 + LowByte)]
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: TRIADC_iGetData3
;  FUNCTION NAME: TRIADC_iGetData3ClearFlag
;
;  DESCRIPTION:
;    Returns the data from the A/D.  Does not check if data is available.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:
;
;  RETURNS:
;     X:A contains 16 bit ADC result.  X = MSB, A = LSB
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;    Currently only the page pointer registers listed below are modified: 
;          CUR_PP
;
 TRIADC_iGetData3ClearFlag:
_TRIADC_iGetData3ClearFlag:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >TRIADC_bfStatus
   and   [TRIADC_bfStatus], ~TRIADC_fDATA_READY  ; Clear Data ready bit
   mov   X, [(TRIADC_iResult3 + HighByte)]
   mov   A, [(TRIADC_iResult3 + LowByte)]
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret

 TRIADC_iGetData3:
_TRIADC_iGetData3:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >TRIADC_bfStatus
   mov   X, [(TRIADC_iResult3 + HighByte)]
   mov   A, [(TRIADC_iResult3 + LowByte)]
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: TRIADC_ClearFlag
;
;  DESCRIPTION:
;    Clears the data ready flag.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS: none
;
;  RETURNS: none
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;    Currently only the page pointer registers listed below are modified: 
;          CUR_PP
;
 TRIADC_ClearFlag:
_TRIADC_ClearFlag:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >TRIADC_bfStatus
   and   [TRIADC_bfStatus], ~TRIADC_fDATA_READY  ; Clear Data ready bit
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: TRIADC_SetResolution
;
;  DESCRIPTION:
;    Sets A/D resolution between 7 and 13 bits.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:
;   A => passes the number of bits of resolution. ( 7 to 13)
;
;  RETURNS:
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;    Currently only the page pointer registers listed below are modified: 
;          CUR_PP
;
;    This function halts the PWM and the counter to sync the A/D , but
;    does not re-enable the counter or PWM. To restart the A/D, "Get_Samples"
;    should be called.
;
 TRIADC_SetResolution:
_TRIADC_SetResolution:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >TRIADC_bfStatus
   
   and   reg[TRIADC_bfADC1cr2], ~TRIADC_fRES_SET

   call  TRIADC_StopAD                             ; Stop the A/D if it is running
   mov   [TRIADC_bfStatus], 00h                    ; and clear status and old resolution

                                                   ; Check for resolution to be within min and max values
   cmp   A,TRIADC_bMINRES                          ; Check low end of resolution
   jnc   TRIADC_CHECKHI
   mov   A,TRIADC_bMINRES                          ; Too low - load legal low value
   jmp   TRIADC_RES_OK

TRIADC_CHECKHI:                                    ; Check high end of resolution
   cmp   A,TRIADC_bMAXRES
   jc    TRIADC_RES_OK
   mov   A,TRIADC_bMAXRES                          ; Too high - load legal Max value

TRIADC_RES_OK:
                                                   ; Calculate compare value for the PWM which
                                                   ; computes the integrate time
   sub   A, TRIADC_bMINRES                         ; Normalize with min resolution
   or    [TRIADC_bfStatus], A
                                                   ; Since min resolution is 7, 2^^7 = 128, the clock
                                                   ; is running 4x so 128*4=512 or 0x0200
   add   A,01h                                     ; The MSB is 02h.
   mov   X,A
   mov   A,01h

TRIADC_CALC_INTTIME:                               ; Now shift the MSB left for every bit of resolution of min (7).
   asl   A
   dec   X
   jnz   TRIADC_CALC_INTTIME

TRIADC_LOAD_INTTIME:                               ; Load compare value and Calc time into registers
                                                   ; Since minimum resolution is 7 bits, this value will always start at 0
   mov   reg[TRIADC_bPWM_IntTime_LSB], 00h
   mov   reg[TRIADC_bPWM_IntTime_MSB], A

                                                   ; Load the CalcTime into the PWM Period
   mov   reg[TRIADC_bPWM_Period_LSB], <wCalcTime
   add   A, >wCalcTime
   mov   reg[TRIADC_bPWM_Period_MSB],A
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret
.ENDSECTION

; End of File TRIADC.asm
