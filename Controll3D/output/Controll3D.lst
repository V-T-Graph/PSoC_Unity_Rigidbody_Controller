FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.3.2710
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 05 70 LJMP  _TRIADC_CNT1_ISR   (0149)     ljmp	_TRIADC_CNT1_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 05 79 LJMP  _TRIADC_PWM16_ISR  (0157)     ljmp	_TRIADC_PWM16_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 05 73 LJMP  _TRIADC_CNT2_ISR   (0161)     ljmp	_TRIADC_CNT2_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
0030: 7D 05 76 LJMP  _TRIADC_CNT3_ISR   (0165)     ljmp	_TRIADC_CNT3_ISR
0033: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
0034: 7D 0A F1 LJMP  _Counter8_ISR      (0169)     ljmp	_Counter8_ISR
0037: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
0038: 7D 03 68 LJMP  _UART_TX_ISR       (0173)     ljmp	_UART_TX_ISR
003B: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
003C: 7D 03 69 LJMP  _UART_RX_ISR       (0177)     ljmp	_UART_RX_ISR
003F: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0181)     // call	void_handler
0060: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0185)     // call	void_handler
0064: 7E       RETI                     (0186)     reti
0068: 71 10    OR    F,0x10             
                                        (0187)     ;---------------------------------------------------
                                        (0188)     ; Insert your custom code above this banner
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0191) 
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  Start of Execution.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0196) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0197) ;
                                        (0198) 
                                        (0199) IF	(TOOLCHAIN & HITECH)
                                        (0200)  	AREA PD_startup(CODE, REL, CON)
                                        (0201) ELSE
                                        (0202)     org 68h
                                        (0203) ENDIF
                                        (0204) __Start:
                                        (0205) 
                                        (0206)     ; initialize SMP values for voltage stabilization, if required,
                                        (0207)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0208)     ; least for now. 
                                        (0209)     ;
                                        (0210)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0211)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     M8C_SetBank0
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
                                        (0219) IF ( SELECT_32K )
                                        (0220)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0221) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0222)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0223) ENDIF
                                        (0224) 
                                        (0225) IF	(TOOLCHAIN & HITECH) 
                                        (0226)     ;---------------------------
                                        (0227)     ; Set up the Temporary stack
                                        (0228)     ;---------------------------
                                        (0229)     ; A temporary stack is set up for the SSC instructions.
                                        (0230)     ; The real stack start will be assigned later.
                                        (0231)     ;
                                        (0232) 	global		__Lstackps
                                        (0233) 	mov     a,low __Lstackps
                                        (0234) 	swap    a,sp
                                        (0235) ELSE
                                        (0236)     ;------------------
                                        (0237)     ; Set up the stack
                                        (0238)     ;------------------
0075: 50 27    MOV   A,0x27             (0239)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0240)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0241) ENDIF
                                        (0242) 
                                        (0243)     ;-----------------------------------------------
                                        (0244)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0245)     ;-----------------------------------------------
                                        (0246) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0247) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0248)  IF ( AGND_BYPASS )
                                        (0249)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0250)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0251)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0252)     ; value using the proper trim values.
                                        (0253)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0254)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0255)  ENDIF
                                        (0256) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0257)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0258) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0259) 
007B: 55 F8 00 MOV   [0xF8],0x0         (0260)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [0xF9],0x0         (0261)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0262) 
                                        (0263)     ;---------------------------------------
                                        (0264)     ; Initialize Crystal Oscillator and PLL
                                        (0265)     ;---------------------------------------
                                        (0266) 
                                        (0267) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0268)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0269)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0270)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0271)     ; the ECO to stabilize.
                                        (0272)     ;
                                        (0273)     M8C_SetBank1
                                        (0274)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0275)     M8C_SetBank0
                                        (0276)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0277)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0278)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0279) .WaitFor1s:
                                        (0280)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0281)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0282)                                           ;   since interrupts are not globally enabled
                                        (0283) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0284)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0285)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0286)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0287)     M8C_SetBank0
                                        (0288)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0289) 
                                        (0290) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0291) 
                                        (0292) IF ( PLL_MODE )
                                        (0293)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0294)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0295)     ;
                                        (0296)     M8C_SetBank1
                                        (0297)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0298)     M8C_SetBank0
                                        (0299)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0300)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0301) 
                                        (0302) .WaitFor16ms:
                                        (0303)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0304)     jz   .WaitFor16ms
                                        (0305)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0306)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0307)     M8C_SetBank0
                                        (0308) 
                                        (0309) IF      ( WAIT_FOR_32K )
                                        (0310) ELSE ; !( WAIT_FOR_32K )
                                        (0311)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0312)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0313) ENDIF ;(WAIT_FOR_32K)
                                        (0314) ENDIF ;(PLL_MODE)
                                        (0315) 
                                        (0316) 	;-------------------------------------------------------
                                        (0317)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0318)     ;-------------------------------------------------------
                                        (0319) 
                                        (0320)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0321) 
                                        (0322) IF (SYSCLK_SOURCE)
                                        (0323)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0324) ENDIF
                                        (0325)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0326) 
                                        (0327)     ;------------------------
                                        (0328)     ; Close CT leakage path.
                                        (0329)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0330)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0331)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0332)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0333)     mov   reg[ACB03CR0], 05h
                                        (0334) 
                                        (0335)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0336)     ;---------------------------------------------------
                                        (0337)     ; Insert your custom code below this banner
                                        (0338)     ;---------------------------------------------------
                                        (0339) 
                                        (0340)     ;---------------------------------------------------
                                        (0341)     ; Insert your custom code above this banner
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0344) 
                                        (0345)     ;-------------------------
                                        (0346)     ; Load Base Configuration
                                        (0347)     ;-------------------------
                                        (0348)     ; Load global parameter settings and load the user modules in the
                                        (0349)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0350)     ; to minimize start up time; (2) We may still need to play with the
                                        (0351)     ; Sleep Timer.
                                        (0352)     ;
0097: 7C 03 01 LCALL 0x0301             (0353)     lcall LoadConfigInit
                                        (0354) 
                                        (0355)     ;-----------------------------------
                                        (0356)     ; Initialize C Run-Time Environment
                                        (0357)     ;-----------------------------------
                                        (0358) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0359)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 05 16 MOV   [__r0],0x16        (0360)     mov  [__r0],<__bss_start
                                        (0361) BssLoop:
009F: 3C 05 16 CMP   [__r0],0x16        (0362)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0363)     jz   BssDone
00A4: 3F 05    MVI   [__r0],A           (0364)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0365)     jmp  BssLoop
                                        (0366) BssDone:
00A8: 50 02    MOV   A,0x2              (0367)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 3C    MOV   X,0x3C             (0368)     mov  X,<__idata_start
00AC: 55 05 00 MOV   [__r0],0x0         (0369)     mov  [__r0],<__data_start
                                        (0370) IDataLoop:
00AF: 3C 05 00 CMP   [__r0],0x0         (0371)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0372)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0373)     push A
00B5: 28       ROMX                     (0374)     romx
00B6: 3F 05    MVI   [__r0],A           (0375)     mvi  [__r0],A
00B8: 18       POP   A                  (0376)     pop  A
00B9: 75       INC   X                  (0377)     inc  X
00BA: 09 00    ADC   A,0x0              (0378)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0379)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
00C0: 70 EF    AND   F,0xEF             
                                        (0380) 
                                        (0381) C_RTE_Done:
                                        (0382) 
                                        (0383) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0384) 
                                        (0385)     ;-------------------------------
                                        (0386)     ; Voltage Stabilization for SMP
                                        (0387)     ;-------------------------------
                                        (0388) 
                                        (0389) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0390) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0391)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0392)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0393)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0395)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0396)     M8C_SetBank1
                                        (0397)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0398)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0399)     M8C_SetBank0
                                        (0400)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0401)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0402) .WaitFor2ms:
                                        (0403)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0404)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0405) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0406) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0407) 
                                        (0408)     ;-------------------------------
                                        (0409)     ; Set Power-On Reset (POR) Level
                                        (0410)     ;-------------------------------
                                        (0411)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0412)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0413)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0414)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0415)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0416) 
                                        (0417)     M8C_SetBank1
                                        (0418) 
                                        (0419) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0420)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0421)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0422)  ELSE ; 24HMz                               ;
                                        (0423)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0424)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0425) ENDIF ; 5V
                                        (0426) 
                                        (0427)     M8C_SetBank0
                                        (0428) 
                                        (0429)     ;----------------------------
                                        (0430)     ; Wrap up and invoke "main"
                                        (0431)     ;----------------------------
                                        (0432) 
                                        (0433)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0434)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0435)     ;
00C2: 62 E0 00 MOV   REG[0xE0],0x0      (0436)     mov  reg[INT_MSK0],0
00C5: 71 10    OR    F,0x10             
                                        (0437) 
                                        (0438)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0439)     ;
                                        (0440)     M8C_SetBank1
00C7: 62 E0 00 MOV   REG[0xE0],0x0      (0441)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CA: 70 EF    AND   F,0xEF             
                                        (0442)     M8C_SetBank0
                                        (0443) 
                                        (0444)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0445)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0446)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0447)     ;
00CC: 62 E2 00 MOV   REG[0xE2],0x0      (0448)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0449)                                    ; have been set during the boot process.
                                        (0450) IF	(TOOLCHAIN & HITECH)
                                        (0451) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0452) ELSE
                                        (0453) IF ENABLE_LJMP_TO_MAIN
                                        (0454)     ljmp  _main                    ; goto main (no return)
                                        (0455) ELSE
00CF: 7C 0C 34 LCALL _main              (0456)     lcall _main                    ; call main
                                        (0457) .Exit:
00D2: 8F FF    JMP   0x00D2             (0458)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0459) ENDIF
                                        (0460) ENDIF ; TOOLCHAIN
                                        (0461) 
                                        (0462)     ;---------------------------------
                                        (0463)     ; Library Access to Global Parms
                                        (0464)     ;---------------------------------
                                        (0465)     ;
                                        (0466)  bGetPowerSetting:
                                        (0467) _bGetPowerSetting:
                                        (0468)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0469)     ; Returns value of POWER_SETTING in the A register.
                                        (0470)     ; No inputs. No Side Effects.
                                        (0471)     ;
                                        (0472) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D4: 50 10    MOV   A,0x10             (0473)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0474) ELSE        
                                        (0475)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ENDIF
00D6: 7F       RET                      (0477)     ret
                                        (0478) 
                                        (0479) IF	(TOOLCHAIN & HITECH)
                                        (0480) ELSE
                                        (0481)     ;---------------------------------
                                        (0482)     ; Order Critical RAM & ROM AREAs
                                        (0483)     ;---------------------------------
                                        (0484)     ;  'TOP' is all that has been defined so far...
                                        (0485) 
                                        (0486)     ;  ROM AREAs for C CONST, static & global items
                                        (0487)     ;
                                        (0488)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0489)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0490) __idata_start:
                                        (0491) 
                                        (0492)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0493) __func_lit_start:
                                        (0494) 
                                        (0495)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0496)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0497) 
                                        (0498)     ; CODE segment for general use
                                        (0499)     ;
                                        (0500)     AREA text (ROM, REL, CON)
                                        (0501) __text_start:
                                        (0502) 
                                        (0503)     ; RAM area usage
                                        (0504)     ;
                                        (0505)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0506) __data_start:
                                        (0507) 
                                        (0508)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0509)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0510)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0511) __bss_start:
                                        (0512) 
                                        (0513) ENDIF ; TOOLCHAIN
                                        (0514) 
                                        (0515) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.3.2710
023C: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_controll3d_Bank1
                                        (0006) export LoadConfigTBL_controll3d_Bank0
                                        (0007) export LoadConfigTBL_controll3d_Ordered
                                        (0008) AREA lit(rom, rel)
                                        (0009) LoadConfigTBL_controll3d_Bank0:
                                        (0010) ;  Instance name Counter8, User Module Counter8
                                        (0011) ;       Instance name Counter8, Block Name CNTR8(DBB11)
                                        (0012) 	db		37h, 00h		;Counter8_CONTROL_REG(DBB11CR0)
                                        (0013) 	db		35h, 00h		;Counter8_PERIOD_REG(DBB11DR1)
                                        (0014) 	db		36h, 00h		;Counter8_COMPARE_REG(DBB11DR2)
                                        (0015) ;  Instance name LCD, User Module LCD
                                        (0016) ;  Instance name PGA_1, User Module PGA
                                        (0017) ;       Instance name PGA_1, Block Name GAIN(ACB00)
                                        (0018) 	db		71h, feh		;PGA_1_GAIN_CR0(ACB00CR0)
                                        (0019) 	db		72h, 21h		;PGA_1_GAIN_CR1(ACB00CR1)
                                        (0020) 	db		73h, 20h		;PGA_1_GAIN_CR2(ACB00CR2)
                                        (0021) 	db		70h, 00h		;PGA_1_GAIN_CR3(ACB00CR3)
                                        (0022) ;  Instance name PGA_2, User Module PGA
                                        (0023) ;       Instance name PGA_2, Block Name GAIN(ACB01)
                                        (0024) 	db		75h, feh		;PGA_2_GAIN_CR0(ACB01CR0)
                                        (0025) 	db		76h, a1h		;PGA_2_GAIN_CR1(ACB01CR1)
                                        (0026) 	db		77h, 20h		;PGA_2_GAIN_CR2(ACB01CR2)
                                        (0027) 	db		74h, 00h		;PGA_2_GAIN_CR3(ACB01CR3)
                                        (0028) ;  Instance name PGA_3, User Module PGA
                                        (0029) ;       Instance name PGA_3, Block Name GAIN(ACB02)
                                        (0030) 	db		79h, feh		;PGA_3_GAIN_CR0(ACB02CR0)
                                        (0031) 	db		7ah, 21h		;PGA_3_GAIN_CR1(ACB02CR1)
                                        (0032) 	db		7bh, 20h		;PGA_3_GAIN_CR2(ACB02CR2)
                                        (0033) 	db		78h, 00h		;PGA_3_GAIN_CR3(ACB02CR3)
                                        (0034) ;  Instance name TRIADC, User Module TRIADC
                                        (0035) ;       Instance name TRIADC, Block Name ADC1(ASC10)
                                        (0036) 	db		80h, 90h		;TRIADC_bfADC1cr0(ASC10CR0)
                                        (0037) 	db		81h, 00h		;TRIADC_bfADC1cr1(ASC10CR1)
                                        (0038) 	db		82h, 61h		;TRIADC_bfADC1cr2(ASC10CR2)
                                        (0039) 	db		83h, f0h		;TRIADC_bfADC1cr3(ASC10CR3)
                                        (0040) ;       Instance name TRIADC, Block Name ADC2(ASD11)
                                        (0041) 	db		84h, 90h		;TRIADC_bfADC2cr0(ASD11CR0)
                                        (0042) 	db		85h, 00h		;TRIADC_bfADC2cr1(ASD11CR1)
                                        (0043) 	db		86h, 60h		;TRIADC_bfADC2cr2(ASD11CR2)
                                        (0044) 	db		87h, f0h		;TRIADC_bfADC2cr3(ASD11CR3)
                                        (0045) ;       Instance name TRIADC, Block Name ADC3(ASC12)
                                        (0046) 	db		88h, 90h		;TRIADC_bfADC3cr0(ASC12CR0)
                                        (0047) 	db		89h, 00h		;TRIADC_bfADC3cr1(ASC12CR1)
                                        (0048) 	db		8ah, 60h		;TRIADC_bfADC3cr2(ASC12CR2)
                                        (0049) 	db		8bh, f0h		;TRIADC_bfADC3cr3(ASC12CR3)
                                        (0050) ;       Instance name TRIADC, Block Name CNT1(DBB00)
                                        (0051) 	db		23h, 00h		;TRIADC_bCounter1_CR0(DBB00CR0)
                                        (0052) 	db		21h, 00h		;TRIADC_bPeriod1(DBB00DR1)
                                        (0053) 	db		22h, 00h		;TRIADC_bCompare1(DBB00DR2)
                                        (0054) ;       Instance name TRIADC, Block Name CNT2(DCB03)
                                        (0055) 	db		2fh, 00h		;TRIADC_bCounter2_CR0(DCB03CR0)
                                        (0056) 	db		2dh, 00h		;TRIADC_bPeriod2(DCB03DR1)
                                        (0057) 	db		2eh, 00h		;TRIADC_bCompare2(DCB03DR2)
                                        (0058) ;       Instance name TRIADC, Block Name CNT3(DBB10)
                                        (0059) 	db		33h, 00h		;TRIADC_bCounter3_CR0(DBB10CR0)
                                        (0060) 	db		31h, 00h		;TRIADC_bPeriod3(DBB10DR1)
                                        (0061) 	db		32h, 00h		;TRIADC_bCompare3(DBB10DR2)
                                        (0062) ;       Instance name TRIADC, Block Name PWM16_LSB(DBB01)
                                        (0063) 	db		27h, 00h		;TRIADC_fPWM_LSB_CR0(DBB01CR0)
                                        (0064) 	db		25h, 00h		;TRIADC_bPWM_Period_LSB(DBB01DR1)
                                        (0065) 	db		26h, 00h		;TRIADC_bPWM_IntTime_LSB(DBB01DR2)
                                        (0066) ;       Instance name TRIADC, Block Name PWM16_MSB(DCB02)
                                        (0067) 	db		2bh, 00h		;TRIADC_fPWM_MSB_CR0(DCB02CR0)
                                        (0068) 	db		29h, 00h		;TRIADC_bPWM_Period_MSB(DCB02DR1)
                                        (0069) 	db		2ah, 00h		;TRIADC_bPWM_IntTime_MSB(DCB02DR2)
                                        (0070) ;  Instance name UART, User Module UART
                                        (0071) ;       Instance name UART, Block Name RX(DCB13)
                                        (0072) 	db		3fh, 00h		;UART_RX_CONTROL_REG(DCB13CR0)
                                        (0073) 	db		3dh, 00h		;UART_(DCB13DR1)
                                        (0074) 	db		3eh, 00h		;UART_RX_BUFFER_REG (DCB13DR2)
                                        (0075) ;       Instance name UART, Block Name TX(DCB12)
                                        (0076) 	db		3bh, 00h		;UART_TX_CONTROL_REG(DCB12CR0)
                                        (0077) 	db		39h, 00h		;UART_TX_BUFFER_REG (DCB12DR1)
                                        (0078) 	db		3ah, 00h		;UART_(DCB12DR2)
                                        (0079) ;  Global Register values Bank 0
                                        (0080) 	db		60h, 14h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0081) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0082) 	db		63h, 15h		; AnalogReferenceControl register (ARF_CR)
                                        (0083) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0084) 	db		e6h, 70h		; DecimatorControl_0 register (DEC_CR0)
                                        (0085) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0086) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0087) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0088) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0089) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0090) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0091) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0092) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0093) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0094) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0095) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0096) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0097) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0098) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0099) 	db		bdh, 20h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0100) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0101) 	db		ffh
                                        (0102) LoadConfigTBL_controll3d_Bank1:
                                        (0103) ;  Instance name Counter8, User Module Counter8
                                        (0104) ;       Instance name Counter8, Block Name CNTR8(DBB11)
                                        (0105) 	db		34h, 21h		;Counter8_FUNC_REG(DBB11FN)
                                        (0106) 	db		35h, 14h		;Counter8_INPUT_REG(DBB11IN)
                                        (0107) 	db		36h, 20h		;Counter8_OUTPUT_REG(DBB11OU)
                                        (0108) ;  Instance name LCD, User Module LCD
                                        (0109) ;  Instance name PGA_1, User Module PGA
                                        (0110) ;       Instance name PGA_1, Block Name GAIN(ACB00)
                                        (0111) ;  Instance name PGA_2, User Module PGA
                                        (0112) ;       Instance name PGA_2, Block Name GAIN(ACB01)
                                        (0113) ;  Instance name PGA_3, User Module PGA
                                        (0114) ;       Instance name PGA_3, Block Name GAIN(ACB02)
                                        (0115) ;  Instance name TRIADC, User Module TRIADC
                                        (0116) ;       Instance name TRIADC, Block Name ADC1(ASC10)
                                        (0117) ;       Instance name TRIADC, Block Name ADC2(ASD11)
                                        (0118) ;       Instance name TRIADC, Block Name ADC3(ASC12)
                                        (0119) ;       Instance name TRIADC, Block Name CNT1(DBB00)
                                        (0120) 	db		20h, 21h		;TRIADC_fCounter1FN(DBB00FN)
                                        (0121) 	db		21h, 45h		;TRIADC_fCounter1SL(DBB00IN)
                                        (0122) 	db		22h, 40h		;TRIADC_fCounter1OS(DBB00OU)
                                        (0123) ;       Instance name TRIADC, Block Name CNT2(DCB03)
                                        (0124) 	db		2ch, 21h		;TRIADC_fCounter2FN(DCB03FN)
                                        (0125) 	db		2dh, 55h		;TRIADC_fCounter2SL(DCB03IN)
                                        (0126) 	db		2eh, 40h		;TRIADC_fCounter2OS(DCB03OU)
                                        (0127) ;       Instance name TRIADC, Block Name CNT3(DBB10)
                                        (0128) 	db		30h, 21h		;TRIADC_fCounter3FN(DBB10FN)
                                        (0129) 	db		31h, 65h		;TRIADC_fCounter3SL(DBB10IN)
                                        (0130) 	db		32h, 40h		;TRIADC_fCounter3OS(DBB10OU)
                                        (0131) ;       Instance name TRIADC, Block Name PWM16_LSB(DBB01)
                                        (0132) 	db		24h, 01h		;TRIADC_bfPWM_LSB_FN(DBB01FN)
                                        (0133) 	db		25h, 15h		;TRIADC_(DBB01IN)
                                        (0134) 	db		26h, 40h		;TRIADC_(DBB01OU)
                                        (0135) ;       Instance name TRIADC, Block Name PWM16_MSB(DCB02)
                                        (0136) 	db		28h, 21h		;TRIADC_bfPWM_MSB_FN(DCB02FN)
                                        (0137) 	db		29h, 35h		;TRIADC_(DCB02IN)
                                        (0138) 	db		2ah, 40h		;TRIADC_(DCB02OU)
                                        (0139) ;  Instance name UART, User Module UART
                                        (0140) ;       Instance name UART, Block Name RX(DCB13)
                                        (0141) 	db		3ch, 05h		;UART_RX_FUNC_REG   (DCB13FN)
                                        (0142) 	db		3dh, 18h		;UART_RX_INPUT_REG  (DCB13IN)
                                        (0143) 	db		3eh, 00h		;UART_RX_OUTPUT_REG (DCB13OU)
                                        (0144) ;       Instance name UART, Block Name TX(DCB12)
                                        (0145) 	db		38h, 0dh		;UART_TX_FUNC_REG   (DCB12FN)
                                        (0146) 	db		39h, 08h		;UART_TX_INPUT_REG  (DCB12IN)
                                        (0147) 	db		3ah, 05h		;UART_TX_OUTPUT_REG (DCB12OU)
                                        (0148) ;  Global Register values Bank 1
                                        (0149) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0150) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0151) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0152) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0153) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0154) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0155) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0156) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0157) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0158) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0159) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0160) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0161) 	db		e1h, 20h		; OscillatorControl_1 register (OSC_CR1)
                                        (0162) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0163) 	db		dfh, 00h		; OscillatorControl_3 register (OSC_CR3)
                                        (0164) 	db		deh, 00h		; OscillatorControl_4 register (OSC_CR4)
                                        (0165) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0166) 	db		ffh
                                        (0167) AREA psoc_config(rom, rel)
                                        (0168) LoadConfigTBL_controll3d_Ordered:
                                        (0169) ;  Ordered Global Register values
                                        (0170) 	M8C_SetBank0
023E: 62 00 00 MOV   REG[0x0],0x0       (0171) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0241: 71 10    OR    F,0x10             
                                        (0172) 	M8C_SetBank1
0243: 62 00 20 MOV   REG[0x0],0x20      (0173) 	mov	reg[00h], 20h		; Port_0_DriveMode_0 register (PRT0DM0)
0246: 62 01 DF MOV   REG[0x1],0xDF      (0174) 	mov	reg[01h], dfh		; Port_0_DriveMode_1 register (PRT0DM1)
0249: 70 EF    AND   F,0xEF             
                                        (0175) 	M8C_SetBank0
024B: 62 03 DF MOV   REG[0x3],0xDF      (0176) 	mov	reg[03h], dfh		; Port_0_DriveMode_2 register (PRT0DM2)
024E: 62 02 20 MOV   REG[0x2],0x20      (0177) 	mov	reg[02h], 20h		; Port_0_GlobalSelect register (PRT0GS)
0251: 71 10    OR    F,0x10             
                                        (0178) 	M8C_SetBank1
0253: 62 02 00 MOV   REG[0x2],0x0       (0179) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0256: 62 03 00 MOV   REG[0x3],0x0       (0180) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0259: 70 EF    AND   F,0xEF             
                                        (0181) 	M8C_SetBank0
025B: 62 01 00 MOV   REG[0x1],0x0       (0182) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
025E: 62 04 00 MOV   REG[0x4],0x0       (0183) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0261: 71 10    OR    F,0x10             
                                        (0184) 	M8C_SetBank1
0263: 62 04 00 MOV   REG[0x4],0x0       (0185) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
0266: 62 05 FF MOV   REG[0x5],0xFF      (0186) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
0269: 70 EF    AND   F,0xEF             
                                        (0187) 	M8C_SetBank0
026B: 62 07 FF MOV   REG[0x7],0xFF      (0188) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
026E: 62 06 00 MOV   REG[0x6],0x0       (0189) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0271: 71 10    OR    F,0x10             
                                        (0190) 	M8C_SetBank1
0273: 62 06 00 MOV   REG[0x6],0x0       (0191) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0276: 62 07 00 MOV   REG[0x7],0x0       (0192) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0279: 70 EF    AND   F,0xEF             
                                        (0193) 	M8C_SetBank0
027B: 62 05 00 MOV   REG[0x5],0x0       (0194) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
027E: 62 08 00 MOV   REG[0x8],0x0       (0195) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0281: 71 10    OR    F,0x10             
                                        (0196) 	M8C_SetBank1
0283: 62 08 7F MOV   REG[0x8],0x7F      (0197) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
0286: 62 09 80 MOV   REG[0x9],0x80      (0198) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
0289: 70 EF    AND   F,0xEF             
                                        (0199) 	M8C_SetBank0
028B: 62 0B 80 MOV   REG[0xB],0x80      (0200) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
028E: 62 0A 00 MOV   REG[0xA],0x0       (0201) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0291: 71 10    OR    F,0x10             
                                        (0202) 	M8C_SetBank1
0293: 62 0A 00 MOV   REG[0xA],0x0       (0203) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0296: 62 0B 00 MOV   REG[0xB],0x0       (0204) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0299: 70 EF    AND   F,0xEF             
                                        (0205) 	M8C_SetBank0
029B: 62 09 00 MOV   REG[0x9],0x0       (0206) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
029E: 62 0C 00 MOV   REG[0xC],0x0       (0207) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
02A1: 71 10    OR    F,0x10             
                                        (0208) 	M8C_SetBank1
02A3: 62 0C 00 MOV   REG[0xC],0x0       (0209) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
02A6: 62 0D 00 MOV   REG[0xD],0x0       (0210) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
02A9: 70 EF    AND   F,0xEF             
                                        (0211) 	M8C_SetBank0
02AB: 62 0F 00 MOV   REG[0xF],0x0       (0212) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
02AE: 62 0E 00 MOV   REG[0xE],0x0       (0213) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
02B1: 71 10    OR    F,0x10             
                                        (0214) 	M8C_SetBank1
02B3: 62 0E 00 MOV   REG[0xE],0x0       (0215) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
02B6: 62 0F 00 MOV   REG[0xF],0x0       (0216) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
02B9: 70 EF    AND   F,0xEF             
                                        (0217) 	M8C_SetBank0
02BB: 62 0D 00 MOV   REG[0xD],0x0       (0218) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
02BE: 62 10 00 MOV   REG[0x10],0x0      (0219) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
02C1: 71 10    OR    F,0x10             
                                        (0220) 	M8C_SetBank1
02C3: 62 10 00 MOV   REG[0x10],0x0      (0221) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
02C6: 62 11 00 MOV   REG[0x11],0x0      (0222) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
02C9: 70 EF    AND   F,0xEF             
                                        (0223) 	M8C_SetBank0
02CB: 62 13 00 MOV   REG[0x13],0x0      (0224) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
02CE: 62 12 00 MOV   REG[0x12],0x0      (0225) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
02D1: 71 10    OR    F,0x10             
                                        (0226) 	M8C_SetBank1
02D3: 62 12 00 MOV   REG[0x12],0x0      (0227) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
02D6: 62 13 00 MOV   REG[0x13],0x0      (0228) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
02D9: 70 EF    AND   F,0xEF             
                                        (0229) 	M8C_SetBank0
02DB: 62 11 00 MOV   REG[0x11],0x0      (0230) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
02DE: 62 14 00 MOV   REG[0x14],0x0      (0231) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
02E1: 71 10    OR    F,0x10             
                                        (0232) 	M8C_SetBank1
02E3: 62 14 00 MOV   REG[0x14],0x0      (0233) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
02E6: 62 15 00 MOV   REG[0x15],0x0      (0234) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
02E9: 70 EF    AND   F,0xEF             
                                        (0235) 	M8C_SetBank0
02EB: 62 17 00 MOV   REG[0x17],0x0      (0236) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
02EE: 62 16 00 MOV   REG[0x16],0x0      (0237) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
02F1: 71 10    OR    F,0x10             
                                        (0238) 	M8C_SetBank1
02F3: 62 16 00 MOV   REG[0x16],0x0      (0239) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
02F6: 62 17 00 MOV   REG[0x17],0x0      (0240) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
02F9: 70 EF    AND   F,0xEF             
                                        (0241) 	M8C_SetBank0
02FB: 62 15 00 MOV   REG[0x15],0x0      (0242) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
02FE: 70 EF    AND   F,0xEF             
                                        (0243) 	M8C_SetBank0
0300: 7F       RET                      (0244) 	ret
                                        (0245) 
                                        (0246) 
                                        (0247) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.3.2710
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_controll3d
                                        (0026) export _LoadConfig_controll3d
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
0301: 55 13 00 MOV   [0x13],0x0         (0065) 	mov		[Port_2_Data_SHADE], 0h
0304: 55 14 7F MOV   [0x14],0x7F        (0066) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
0307: 55 15 80 MOV   [0x15],0x80        (0067) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0068) 
030A: 7C 03 11 LCALL 0x0311             (0069) 	lcall	LoadConfig_controll3d
030D: 7C 02 3C LCALL 0x023C             (0070) 	lcall	LoadConfigTBL_controll3d_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
0310: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration controll3d
                                        (0078) ;
                                        (0079) ;    Load configuration registers for controll3d.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_controll3d:
                                        (0096)  LoadConfig_controll3d:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
0311: 10       PUSH  X                  (0099) 	push	x
0312: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
0314: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
0316: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
0317: 50 01    MOV   A,0x1              (0104)     mov     A, >LoadConfigTBL_controll3d_Bank0
0319: 57 5E    MOV   X,0x5E             (0105)     mov     X, <LoadConfigTBL_controll3d_Bank0
031B: 7C 03 2C LCALL 0x032C             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
031E: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
0320: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
0321: 50 01    MOV   A,0x1              (0111)     mov     A, >LoadConfigTBL_controll3d_Bank1
0323: 57 E9    MOV   X,0xE9             (0112)     mov     X, <LoadConfigTBL_controll3d_Bank1
0325: 7C 03 2C LCALL 0x032C             (0113)     lcall   LoadConfig              ; Load the bank 1 values
0328: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
032A: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
032B: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
032C: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
032E: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
032F: 08       PUSH  A                  (0143)     push    A
0330: 4F       MOV   X,SP               (0144)     mov     X, SP
0331: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
0334: D0 04    JNC   0x0339             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0336: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
0339: 18       POP   A                  (0149)     pop     A
033A: 20       POP   X                  (0150)     pop     X
033B: 70 EF    AND   F,0xEF             
033D: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0340: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
0341: 08       PUSH  A                  (0156)     push    A
0342: 28       ROMX                     (0157)     romx                            ; Load register address from table
0343: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
0345: A0 1F    JZ    0x0365             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
0347: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
0348: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
034B: A0 03    JZ    0x034F             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
034D: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
034F: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
0351: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
0352: 20       POP   X                  (0167)     pop     X
0353: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
0354: 09 00    ADC   A,0x0              (0169)     adc     A, 0
0356: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
0357: 08       PUSH  A                  (0171)     push    A
0358: 28       ROMX                     (0172)     romx                            ; load config data from the table
0359: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
035A: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
035C: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
035E: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
035F: 20       POP   X                  (0177)     pop     X
0360: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
0361: 09 00    ADC   A,0x0              (0179)     adc     A, 0
0363: 8F D7    JMP   0x033B             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
0365: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
0367: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_2_Data_SHADE:
                                        (0192) Port_2_Data_SHADE:	BLK	1
                                        (0193) _Port_2_DriveMode_0_SHADE:
                                        (0194) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_2_DriveMode_1_SHADE:
                                        (0196) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2012/9/21 at 11:59:48
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
0368: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_RXBUF_ENABLE)
0369: 08       PUSH  A                  (0180)    push A
036A: 10       PUSH  X                  (0181)    push X
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
036B: 58 07    MOV   X,[0x7]            (0187)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
036D: 5D 3F    MOV   A,REG[0x3F]        (0188)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
036F: 08       PUSH  A                  (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
0370: 21 08    AND   A,0x8              (0191)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
0372: B0 04    JNZ   0x0377             (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
0374: 18       POP   A                  (0193)    pop  A                                                  ; Restore stack
0375: 80 40    JMP   0x03B6             (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
0377: 18       POP   A                  (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
0378: 21 E0    AND   A,0xE0             (0200)    and  A,UART_RX_ERROR
037A: A0 12    JZ    0x038D             (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
037C: 2C 06    OR    [0x6],A            (0203)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
037E: 49 3E 00 TST   REG[0x3E],0x0      (0204)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
0381: 21 20    AND   A,0x20             (0205)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
0383: A0 32    JZ    0x03B6             (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
0385: 41 3F FE AND   REG[0x3F],0xFE     (0210)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
0388: 43 3F 01 OR    REG[0x3F],0x1      (0211)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
038B: 80 2A    JMP   0x03B6             (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
038D: 5D 3E    MOV   A,REG[0x3E]        (0216)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
038F: 47 06 01 TST   [0x6],0x1          (0219)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
0392: B0 23    JNZ   0x03B6             (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
0394: 39 0D    CMP   A,0xD              (0222)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
0396: B0 09    JNZ   0x03A0             (0223)    jnz  .UARTRX_CHK_BACKSPACE
0398: 2E 06 01 OR    [0x6],0x1          (0224)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
039B: 56 16 00 MOV   [X+22],0x0         (0230)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
039E: 80 17    JMP   0x03B6             (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
03A0: 39 20    CMP   A,0x20             (0246)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
03A2: C0 13    JC    0x03B6             (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
03A4: 3C 07 0F CMP   [0x7],0xF          (0253)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
03A7: C0 09    JC    0x03B1             (0254)    jc   .UARTRX_ISR_GETDATA
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
03A9: 56 16 00 MOV   [X+22],0x0         (0256)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
03AC: 2E 06 10 OR    [0x6],0x10         (0258)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
03AF: 80 06    JMP   0x03B6             (0259)    jmp  .RESTORE_IDX_PP
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
03B1: 54 16    MOV   [X+22],A           (0264)    mov  [X+UART_aRxBuffer],A                               ; store data in array
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
03B3: 75       INC   X                  (0266)    inc  X                                                  ; Inc the pointer
03B4: 5A 07    MOV   [0x7],X            (0267)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
03B6: 20       POP   X                  (0275)    pop  X
03B7: 18       POP   A                  (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_RX_ISR_END:
03B8: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UARTINT.asm
                                        (0284) 
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
03B9: 43 E1 40 OR    REG[0xE1],0x40     (0002) ;;*****************************************************************************
03BC: 43 E1 80 OR    REG[0xE1],0x80     
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2012/9/21 at 11:59:48
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
03BF: 7F       RET                      (0182)    ret
03C0: 41 E1 BF AND   REG[0xE1],0xBF     
03C3: 41 E1 7F AND   REG[0xE1],0x7F     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
03C6: 7F       RET                      (0214)    ret
03C7: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
03C9: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
03CB: A0 07    JZ    0x03D3             (0249)    jz    .SetModeRegEmpty
03CD: 43 38 10 OR    REG[0x38],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
03D0: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
03D2: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
03D3: 41 38 EF AND   REG[0x38],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
03D6: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
03D8: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
03D9: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
03DB: 60 3B    MOV   REG[0x3B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
03DD: 60 3F    MOV   REG[0x3F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
03DF: 91 0E    CALL  _UART_CmdReset     (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
03E1: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
03E2: 41 3B FE AND   REG[0x3B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
03E5: 41 3F FE AND   REG[0x3F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
03E8: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
03E9: 60 39    MOV   REG[0x39],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
03EB: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
03EC: 5D 3B    MOV   A,REG[0x3B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
03EE: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
03EF: 5D 3E    MOV   A,REG[0x3E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
03F1: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
03F2: 5D 3F    MOV   A,REG[0x3F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
03F4: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
03F5: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
03F7: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
03F9: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
03FB: A0 06    JZ    0x0402             (0492)    jz   .SetTxCmpMode
                                        (0493) 
03FD: 41 38 EF AND   REG[0x38],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
0400: 80 04    JMP   0x0405             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
0402: 43 38 10 OR    REG[0x38],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
0405: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
0407: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
0408: 08       PUSH  A                  (0536)    push A
0409: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
040B: A0 06    JZ    0x0412             (0538)    jz   .DisRxInt
040D: 43 E1 80 OR    REG[0xE1],0x80     
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
0410: 80 04    JMP   0x0415             (0541)    jmp  .CheckTxInt
0412: 41 E1 7F AND   REG[0xE1],0x7F     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
0415: 18       POP   A                  (0547)    pop  A
0416: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
0418: A0 06    JZ    0x041F             (0549)    jz   .DisTxInt
041A: 43 E1 40 OR    REG[0xE1],0x40     
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
041D: 80 04    JMP   0x0422             (0552)    jmp  .End_IntCntl
041F: 41 E1 BF AND   REG[0xE1],0xBF     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
0422: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
0433: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
0434: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
0435: 67       ASR   A                  (0603)    asr   A
0436: 67       ASR   A                  (0604)    asr   A
0437: 67       ASR   A                  (0605)    asr   A
0438: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
043A: FF E7    INDEX 0x0423             (0607)    index UART_HEX_STR                  ; Get Hex value
043C: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
043E: 18       POP   A                  (0609)    pop   A                             ; Restore value
043F: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
0441: FF E0    INDEX 0x0423             (0611)    index UART_HEX_STR                  ; Get Hex value
0443: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
0445: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
0446: 4B       SWAP  A,X                (0645)    swap  A,X
0447: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
0449: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
044A: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
044C: 7F       RET                      (0650)    ret
044D: 49 3B 10 TST   REG[0x3B],0x10     
0450: AF FC    JZ    _UART_PutChar      
0452: 60 39    MOV   REG[0x39],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
0454: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
0455: 49 3F 08 TST   REG[0x3F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
0458: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
045A: 5D 3E    MOV   A,REG[0x3E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
045C: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
045D: 5D 3F    MOV   A,REG[0x3F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
045F: 08       PUSH  A                  (0756)    push A
0460: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0462: B0 04    JNZ   0x0467             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0464: 18       POP   A                  (0759)    pop  A
0465: 80 0B    JMP   0x0471             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
0467: 5D 3E    MOV   A,REG[0x3E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
0469: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
046A: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
046B: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
046D: B0 03    JNZ   0x0471             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
046F: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
0470: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
0471: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
0473: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
0474: 5D 3F    MOV   A,REG[0x3F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
0476: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
0478: 08       PUSH  A                  (0819)    push A
0479: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
047B: B0 07    JNZ   0x0483             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
047D: 18       POP   A                  (0822)    pop  A
047E: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
0480: 4B       SWAP  A,X                (0824)    swap A,X
0481: 80 07    JMP   0x0489             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
0483: 18       POP   A                  (0828)    pop  A
0484: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
0486: 4B       SWAP  A,X                (0830)    swap A,X
0487: 5D 3E    MOV   A,REG[0x3E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
0489: 7F       RET                      (0836)    ret
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
048A: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
048C: A0 06    JZ    0x0493             (0872)    jz    End_PutString                           ; Check for end of string
048E: 9F BD    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
0490: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
0491: 8F F8    JMP   _UART_PutString    (0875)    jmp   .PutStringLoop                          ; Get next character
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
0493: 7F       RET                      (0879)    ret
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
0494: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
0495: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
0497: A0 13    JZ    0x04AB             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
0499: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
049B: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
049D: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
049F: 49 3B 10 TST   REG[0x3B],0x10     
04A2: AF FC    JZ    0x049F             
04A4: 60 39    MOV   REG[0x39],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
04A6: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
04A7: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
04A9: 8F EB    JMP   0x0495             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
04AB: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
04AC: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
04AD: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
04B0: B0 06    JNZ   0x04B7             (0980)    jnz   .CW_WRITEIT
04B2: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
04B5: A0 1D    JZ    0x04D3             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
04B7: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
04B8: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
04BA: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
04BC: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
04BD: 49 3B 10 TST   REG[0x3B],0x10     
04C0: AF FC    JZ    0x04BD             
04C2: 60 39    MOV   REG[0x39],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
04C4: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
04C5: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
04C8: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
04CB: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
04CE: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
04D1: 8F DB    JMP   0x04AD             (0995)    jmp   .CW_Loop
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
04D3: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
04D4: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
04D5: 10       PUSH  X                  (1030)    push  X
04D6: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
04D7: A0 0B    JZ    0x04E3             (1032)    jz    .End_CPutString
04D9: 9F 72    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
04DB: 20       POP   X                  (1034)    pop   X
04DC: 18       POP   A                  (1035)    pop   A
04DD: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
04DE: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
04E0: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
04E1: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
04E3: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
04E5: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
04E6: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
04E8: 9F 63    CALL  _UART_PutChar      (1074)    call UART_PutChar
04EA: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
04EC: 9F 5F    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
04EE: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
04EF: 55 16 00 MOV   [0x16],0x0         (1122)    mov [UART_aRxBuffer], 0x00
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
04F2: 55 07 00 MOV   [0x7],0x0          (1124)    mov [UART_bRxCnt], 0x00
04F5: 26 06 00 AND   [0x6],0x0          (1125)    and [UART_fStatus], 0x00
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
04F8: 55 26 00 MOV   [0x26],0x0         (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
04FB: 7F       RET                      (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
04FC: 51 06    MOV   A,[0x6]            (1165)    mov A,  [UART_fStatus]
04FE: 21 01    AND   A,0x1              (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
0500: 7F       RET                      (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
0501: 51 06    MOV   A,[0x6]            (1209)    mov A,  [UART_fStatus]
0503: 21 F0    AND   A,0xF0             (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
0505: 26 06 0F AND   [0x6],0xF          (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
0508: 7F       RET                      (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
0509: 51 07    MOV   A,[0x7]            (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
050B: 7F       RET                      (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
050C: 50 16    MOV   A,0x16             (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
050E: 02 26    ADD   A,[0x26]           (1305)    add   A, [ptrParam]                      ; Add string offset
0510: 5C       MOV   X,A                (1306)    mov   X, A
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
0511: 52 00    MOV   A,[X+0]            (1308)    mov   A, [X]                             ; Get character pointed by X
0513: B0 04    JNZ   0x0518             (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
0515: 10       PUSH  X                  (1310)    push  X                                  ;       Yes, Save LSB of current pointer
0516: 80 33    JMP   0x054A             (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
0518: 39 20    CMP   A,0x20             (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
051A: B0 11    JNZ   0x052C             (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
051C: 75       INC   X                  (1317)    inc   X                                  ;   Yes, Increment both index and...
051D: 76 26    INC   [0x26]             (1318)    inc   [ptrParam]                         ;          the stored pointer.
051F: 52 00    MOV   A,[X+0]            (1319)    mov   A, [X]                             ; Get character pointed by X
0521: 3C 26 0F CMP   [0x26],0xF         (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
0524: BF F3    JNZ   0x0518             (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
0526: 10       PUSH  X                  (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
0527: 56 00 00 MOV   [X+0],0x0          (1326)    mov   [X], 0x00                          ; Make sure string is zero
052A: 80 1F    JMP   0x054A             (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
052C: 10       PUSH  X                  (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
052D: 75       INC   X                  (1333)    inc   X                                  ; Advance pointers.
052E: 76 26    INC   [0x26]             (1334)    inc   [ptrParam]
0530: 3C 26 0F CMP   [0x26],0xF         (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
0533: AF F3    JZ    0x0527             (1336)    jz    .TerminateString
0535: 52 00    MOV   A,[X+0]            (1337)    mov   A, [X]                             ; Get next character
0537: A0 12    JZ    0x054A             (1338)    jz    .End_GetNextParam
0539: 39 20    CMP   A,0x20             (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
053B: BF F1    JNZ   0x052D             (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
053D: 56 00 00 MOV   [X+0],0x0          (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
0540: 76 26    INC   [0x26]             (1342)    inc   [ptrParam]
0542: 3C 26 0F CMP   [0x26],0xF         (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
0545: B0 04    JNZ   0x054A             (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
0547: 55 26 0F MOV   [0x26],0xF         (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
054A: 20       POP   X                  (1348)    pop   X
054B: 10       PUSH  X                  (1349)    push  X
054C: 3D 00 00 CMP   [X+0],0x0          (1350)    cmp   [X], 0x00
054F: B0 06    JNZ   0x0556             (1351)    jnz   .NotNullString
0551: 20       POP   X                  (1352)    pop   X
0552: 57 00    MOV   X,0x0              (1353)    mov   X, 0x00
0554: 5B       MOV   A,X                (1354)    mov   A, X
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
0555: 7F       RET                      (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
0556: 20       POP   X                  (1360)    pop  X
0557: 50 00    MOV   A,0x0              (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
0559: 7F       RET                      (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
055A: 50 16    MOV   A,0x16             (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
055C: 02 26    ADD   A,[0x26]           (1397)    add  A, [ptrParam]                       ; Add string offset
055E: 5C       MOV   X,A                (1398)    mov  X,A
055F: 50 00    MOV   A,0x0              (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
0561: 7F       RET                      (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: lib\triadcint.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   TRIADCINT.asm
                                        (0004) ;;  Version: 2.20, Updated on 2012/9/21 at 11:59:44
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: TriADC Interrupt Service Routines
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "TRIADC.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export _TRIADC_CNT1_ISR
                                        (0021) export _TRIADC_CNT2_ISR
                                        (0022) export _TRIADC_CNT3_ISR
                                        (0023) export _TRIADC_PWM16_ISR
                                        (0024) export  TRIADC_cCounter1U
                                        (0025) export  TRIADC_cCounter2U
                                        (0026) export  TRIADC_cCounter3U
                                        (0027) export _TRIADC_iResult1
                                        (0028) export  TRIADC_iResult1
                                        (0029) export _TRIADC_iResult2
                                        (0030) export  TRIADC_iResult2
                                        (0031) export _TRIADC_iResult3
                                        (0032) export  TRIADC_iResult3
                                        (0033) export _TRIADC_bfStatus
                                        (0034) export  TRIADC_bfStatus
                                        (0035) export  TRIADC_bSampC
                                        (0036) 
                                        (0037) ;-----------------------------------------------
                                        (0038) ; Variable Allocation
                                        (0039) ;-----------------------------------------------
                                        (0040) AREA InterruptRAM(RAM, REL, CON)
                                        (0041) 
                                        (0042)  TRIADC_cCounter1U:     BLK   1  ;The Upper byte of the Counter
                                        (0043)  TRIADC_cCounter2U:     BLK   1  ;The Upper byte of the Counter
                                        (0044)  TRIADC_cCounter3U:     BLK   1  ;The Upper byte of the Counter
                                        (0045) _TRIADC_iResult1:
                                        (0046)  TRIADC_iResult1:       BLK   2  ;A/D value
                                        (0047) _TRIADC_iResult2:
                                        (0048)  TRIADC_iResult2:       BLK   2  ;A/D value
                                        (0049) _TRIADC_iResult3:
                                        (0050)  TRIADC_iResult3:       BLK   2  ;A/D value
                                        (0051) _TRIADC_bfStatus:
                                        (0052)  TRIADC_bfStatus:       BLK   1  ;Data Valid Flag
                                        (0053)  TRIADC_bSampC:         BLK   1  ;# of times to run A/D
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  EQUATES and TABLES
                                        (0058) ;-----------------------------------------------
                                        (0059) ; Constant Definitions
                                        (0060) LowByte:   equ 1
                                        (0061) HighByte:  equ 0
                                        (0062) 
                                        (0063) 
                                        (0064) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0065) ;---------------------------------------------------
                                        (0066) ; Insert your custom declarations below this banner
                                        (0067) ;---------------------------------------------------
                                        (0068) 
                                        (0069) ;------------------------
                                        (0070) ; Includes
                                        (0071) ;------------------------
                                        (0072) 
                                        (0073) 	
                                        (0074) ;------------------------
                                        (0075) ;  Constant Definitions
                                        (0076) ;------------------------
                                        (0077) 
                                        (0078) 
                                        (0079) ;------------------------
                                        (0080) ; Variable Allocation
                                        (0081) ;------------------------
                                        (0082) 
                                        (0083) 
                                        (0084) ;---------------------------------------------------
                                        (0085) ; Insert your custom declarations above this banner
                                        (0086) ;---------------------------------------------------
                                        (0087) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0088) 
                                        (0089) 
                                        (0090) AREA UserModules (ROM, REL)
                                        (0091) .LITERAL
                                        (0092) TRIADCMaxNegX4Table:
                                        (0093) ; Bits  7    8    9   10   11   12   13
                                        (0094)    DB  FFh, FEh, FCh, F8h, F0h, E0h, C0h
                                        (0095) 
                                        (0096) TRIADCMaxPosX4Table:
                                        (0097) IF (TRIADC_DATA_FORMAT)
                                        (0098) ; Bits (signed)    7    8    9   10   11   12   13
                                        (0099)               DB  01h, 02h, 04h, 08h, 10h, 20h, 40h
                                        (0100) ELSE
                                        (0101) ; Bits (unsigned)  7    8    9   10   11   12   13
                                        (0102)               DB  02h, 04h, 08h, 10h, 20h, 40h, 80h
                                        (0103) ENDIF
                                        (0104) .ENDLITERAL
                                        (0105) 
                                        (0106) 
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;  FUNCTION NAME: TRIADC_CNT1_ISR (Counter8 Interrupt)
                                        (0109) ;
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;    Increment the upper (software) half on the counter whenever the
                                        (0113) ;    lower (hardware) half of the counter underflows.  This counter
                                        (0114) ;    should start out at the most negative value (0xFF). (Channel 1)
                                        (0115) ;
                                        (0116) ;-----------------------------------------------------------------------------
                                        (0117) ;
                                        (0118) _TRIADC_CNT1_ISR:
0570: 76 08    INC   [0x8]              (0119)    inc [TRIADC_cCounter1U]
                                        (0120)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0121)    ;---------------------------------------------------
                                        (0122)    ; Insert your custom assembly code below this banner
                                        (0123)    ;---------------------------------------------------
                                        (0124)    ;   NOTE: interrupt service routines must preserve
                                        (0125)    ;   the values of the A and X CPU registers.
                                        (0126)    
                                        (0127)    ;---------------------------------------------------
                                        (0128)    ; Insert your custom assembly code above this banner
                                        (0129)    ;---------------------------------------------------
                                        (0130)    
                                        (0131)    ;---------------------------------------------------
                                        (0132)    ; Insert a lcall to a C function below this banner
                                        (0133)    ; and un-comment the lines between these banners
                                        (0134)    ;---------------------------------------------------
                                        (0135)    
                                        (0136)    ;PRESERVE_CPU_CONTEXT
                                        (0137)    ;lcall _My_C_Function
                                        (0138)    ;RESTORE_CPU_CONTEXT
                                        (0139)    
                                        (0140)    ;---------------------------------------------------
                                        (0141)    ; Insert a lcall to a C function above this banner
                                        (0142)    ; and un-comment the lines between these banners
                                        (0143)    ;---------------------------------------------------
                                        (0144)    ;@PSoC_UserCode_END@ (Do not change this line.)
0572: 7E       RETI                     (0145)    reti
                                        (0146) 
                                        (0147) ;-----------------------------------------------------------------------------
                                        (0148) ;  FUNCTION NAME: TRIADC_CNT2_ISR (Counter8 Interrupt)
                                        (0149) ;
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;    Increment the upper (software) half on the counter whenever the
                                        (0153) ;    lower (hardware) half of the counter underflows.  This counter
                                        (0154) ;    should start out at the most negative value (0xFF). (Channel 2)
                                        (0155) ;
                                        (0156) ;-----------------------------------------------------------------------------
                                        (0157) ;
                                        (0158) _TRIADC_CNT2_ISR:
0573: 76 09    INC   [0x9]              (0159)    inc [TRIADC_cCounter2U]
                                        (0160)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0161)    ;---------------------------------------------------
                                        (0162)    ; Insert your custom assembly code below this banner
                                        (0163)    ;---------------------------------------------------
                                        (0164)    ;   NOTE: interrupt service routines must preserve
                                        (0165)    ;   the values of the A and X CPU registers.
                                        (0166)    
                                        (0167)    ;---------------------------------------------------
                                        (0168)    ; Insert your custom assembly code above this banner
                                        (0169)    ;---------------------------------------------------
                                        (0170)    
                                        (0171)    ;---------------------------------------------------
                                        (0172)    ; Insert a lcall to a C function below this banner
                                        (0173)    ; and un-comment the lines between these banners
                                        (0174)    ;---------------------------------------------------
                                        (0175)    
                                        (0176)    ;PRESERVE_CPU_CONTEXT
                                        (0177)    ;lcall _My_C_Function
                                        (0178)    ;RESTORE_CPU_CONTEXT
                                        (0179)    
                                        (0180)    ;---------------------------------------------------
                                        (0181)    ; Insert a lcall to a C function above this banner
                                        (0182)    ; and un-comment the lines between these banners
                                        (0183)    ;---------------------------------------------------
                                        (0184)    ;@PSoC_UserCode_END@ (Do not change this line.)
0575: 7E       RETI                     (0185)    reti
                                        (0186) 
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: TRIADC_CNT3_ISR (Counter8 Interrupt)
                                        (0189) ;
                                        (0190) ;
                                        (0191) ;  DESCRIPTION:
                                        (0192) ;    Increment the upper (software) half on the counter whenever the
                                        (0193) ;    lower (hardware) half of the counter underflows.  This counter
                                        (0194) ;    should start out at the most negative value (0xFF). (Channel 3)
                                        (0195) ;
                                        (0196) ;-----------------------------------------------------------------------------
                                        (0197) ;
                                        (0198) _TRIADC_CNT3_ISR:
0576: 76 0A    INC   [0xA]              (0199)    inc [TRIADC_cCounter3U]
                                        (0200)    ;@PSoC_UserCode_BODY_3@ (Do not change this line.)
                                        (0201)    ;---------------------------------------------------
                                        (0202)    ; Insert your custom assembly code below this banner
                                        (0203)    ;---------------------------------------------------
                                        (0204)    ;   NOTE: interrupt service routines must preserve
                                        (0205)    ;   the values of the A and X CPU registers.
                                        (0206)    
                                        (0207)    ;---------------------------------------------------
                                        (0208)    ; Insert your custom assembly code above this banner
                                        (0209)    ;---------------------------------------------------
                                        (0210)    
                                        (0211)    ;---------------------------------------------------
                                        (0212)    ; Insert a lcall to a C function below this banner
                                        (0213)    ; and un-comment the lines between these banners
                                        (0214)    ;---------------------------------------------------
                                        (0215)    
                                        (0216)    ;PRESERVE_CPU_CONTEXT
                                        (0217)    ;lcall _My_C_Function
                                        (0218)    ;RESTORE_CPU_CONTEXT
                                        (0219)    
                                        (0220)    ;---------------------------------------------------
                                        (0221)    ; Insert a lcall to a C function above this banner
                                        (0222)    ; and un-comment the lines between these banners
                                        (0223)    ;---------------------------------------------------
                                        (0224)    ;@PSoC_UserCode_END@ (Do not change this line.)
0578: 7E       RETI                     (0225)    reti
                                        (0226) 
                                        (0227) ;-----------------------------------------------------------------------------
                                        (0228) ;  FUNCTION NAME: TRIADC_PWM16_ISR  (PWM16 Interrupt)
                                        (0229) ;
                                        (0230) ;  DESCRIPTION:
                                        (0231) ;  This ISR is called when the ADC has completed an integrate cycle.
                                        (0232) ;  The ADC values are calculated and stored in a global locations before
                                        (0233) ;  the end of the ISR.
                                        (0234) ;
                                        (0235) ;-----------------------------------------------------------------------------
                                        (0236) ;
                                        (0237) _TRIADC_PWM16_ISR:
0579: 41 23 FE AND   REG[0x23],0xFE     (0238)    and   reg[TRIADC_bCounter1_CR0], ~TRIADC_fDBLK_ENABLE   ; Disable Counter
057C: 41 2F FE AND   REG[0x2F],0xFE     (0239)    and   reg[TRIADC_bCounter2_CR0], ~TRIADC_fDBLK_ENABLE   ; Disable Counter
057F: 41 33 FE AND   REG[0x33],0xFE     (0240)    and   reg[TRIADC_bCounter3_CR0], ~TRIADC_fDBLK_ENABLE   ; Disable Counter
                                        (0241) IF TRIADC_NoAZ
0582: 43 82 20 OR    REG[0x82],0x20     (0242)    or    reg[TRIADC_bfADC1cr2], TRIADC_fAutoZero           ; Put Integrator in AutoZero
0585: 43 86 20 OR    REG[0x86],0x20     (0243)    or    reg[TRIADC_bfADC2cr2], TRIADC_fAutoZero           ; Put Integrator in AutoZero
0588: 43 8A 20 OR    REG[0x8A],0x20     (0244)    or    reg[TRIADC_bfADC3cr2], TRIADC_fAutoZero           ; Put Integrator in AutoZero
                                        (0245) ENDIF
058B: 43 83 10 OR    REG[0x83],0x10     (0246)    or   reg[TRIADC_bfADC1cr3],TRIADC_fFSW0                 ; Put Integrator in reset
058E: 43 87 10 OR    REG[0x87],0x10     (0247)    or   reg[TRIADC_bfADC2cr3],TRIADC_fFSW0                 ; Put Integrator in reset
0591: 43 8B 10 OR    REG[0x8B],0x10     (0248)    or   reg[TRIADC_bfADC3cr3],TRIADC_fFSW0                 ; Put Integrator in reset
0594: 71 01    OR    F,0x1              
                                        (0249) 
                                        (0250)                                                            ; Enable interrupts for a short period of time just in case.
                                        (0251)                                                            ; Make sure we didn't have a counter interrupt ready to fire
                                        (0252)    M8C_EnableGInt
0596: 40       NOP                      (0253)    nop                                                     ; Wait a couple cycles
0597: 70 FE    AND   F,0xFE             
                                        (0254)    M8C_DisableGInt                                         ; Disable interrupt, read to complete processing
0599: 08       PUSH  A                  (0255)    push  A                                                 ; Save the Accumulator
                                        (0256) 
                                        (0257) 
                                        (0258)    ; Get ADC1 result
059A: 5D 20    MOV   A,REG[0x20]        (0259)    mov   A,reg[TRIADC_bCount1]                             ; Read counter value  (Bogus read puts value in Period register)
059C: 5D 22    MOV   A,REG[0x22]        (0260)    mov   A,reg[TRIADC_bCompare1]                           ; Read counter value
059E: 78       DEC   A                  (0261)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
059F: 73       CPL   A                  (0262)    cpl   A                                                 ; Invert the value
05A0: D0 03    JNC   0x05A4             (0263)    jnc   TRIADC_INT_CALCV1                                 ; if carry, then inc MSB as well
05A2: 76 08    INC   [0x8]              (0264)    inc   [TRIADC_cCounter1U]
                                        (0265) TRIADC_INT_CALCV1:
05A4: 53 0C    MOV   [0xC],A            (0266)    mov   [(TRIADC_iResult1 + LowByte)],A                   ; Store LSB value
05A6: 51 08    MOV   A,[0x8]            (0267)    mov   A, [TRIADC_cCounter1U]                            ; Store MSB from temp counter
05A8: 53 0B    MOV   [0xB],A            (0268)    mov   [(TRIADC_iResult1 + HighByte)],A
                                        (0269) 
                                        (0270)    ; Get ADC2 result
05AA: 5D 2C    MOV   A,REG[0x2C]        (0271)    mov   A,reg[TRIADC_bCount2]                             ; Read counter value  (Bogus read puts value in Period register)
05AC: 5D 2E    MOV   A,REG[0x2E]        (0272)    mov   A,reg[TRIADC_bCompare2]                           ; Read counter value
05AE: 78       DEC   A                  (0273)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
05AF: 73       CPL   A                  (0274)    cpl   A                                                 ; Invert the value
05B0: D0 03    JNC   0x05B4             (0275)    jnc   TRIADC_INT_CALCV2                                 ; if carry, then inc MSB as well
05B2: 76 09    INC   [0x9]              (0276)    inc   [TRIADC_cCounter2U]
                                        (0277) TRIADC_INT_CALCV2:
05B4: 53 0E    MOV   [0xE],A            (0278)    mov   [(TRIADC_iResult2 + LowByte)],A                   ; Store LSB value
05B6: 51 09    MOV   A,[0x9]            (0279)    mov   A, [TRIADC_cCounter2U]                            ; Store MSB from temp counter
05B8: 53 0D    MOV   [0xD],A            (0280)    mov   [(TRIADC_iResult2 + HighByte)],A
                                        (0281) 
                                        (0282)    ; Get ADC3 result
05BA: 5D 30    MOV   A,REG[0x30]        (0283)    mov   A,reg[TRIADC_bCount3]                             ; Read counter value  (Bogus read puts value in Period register)
05BC: 5D 32    MOV   A,REG[0x32]        (0284)    mov   A,reg[TRIADC_bCompare3]                           ; Read counter value
05BE: 78       DEC   A                  (0285)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
05BF: 73       CPL   A                  (0286)    cpl   A                                                 ; Invert the value
05C0: D0 03    JNC   0x05C4             (0287)    jnc   TRIADC_INT_CALCV3                                 ; if carry, then inc MSB as well
05C2: 76 0A    INC   [0xA]              (0288)    inc   [TRIADC_cCounter3U]
                                        (0289) TRIADC_INT_CALCV3:
05C4: 53 10    MOV   [0x10],A           (0290)    mov   [(TRIADC_iResult3 + LowByte)],A                   ; Store LSB value
05C6: 51 0A    MOV   A,[0xA]            (0291)    mov   A, [TRIADC_cCounter3U]                            ; Store MSB from temp counter
05C8: 53 0F    MOV   [0xF],A            (0292)    mov   [(TRIADC_iResult3 + HighByte)],A
                                        (0293) 
                                        (0294)                                                            ; The new value has been stored,
                                        (0295)                                                            ; so get counters ready for next reading first.
05CA: 62 21 FF MOV   REG[0x21],0xFF     (0296)    mov   reg[TRIADC_bPeriod1], ffh                         ; Initialize counter1 to FF - Set to overflow after 256 counts
05CD: 62 2D FF MOV   REG[0x2D],0xFF     (0297)    mov   reg[TRIADC_bPeriod2], ffh                         ; Initialize counter2 to FF - Set to overflow after 256 counts
05D0: 62 31 FF MOV   REG[0x31],0xFF     (0298)    mov   reg[TRIADC_bPeriod3], ffh                         ; Initialize counter3 to FF - Set to overflow after 256 counts
05D3: 43 23 01 OR    REG[0x23],0x1      (0299)    or    reg[TRIADC_bCounter1_CR0],TRIADC_fDBLK_ENABLE     ; Enable Counter1
05D6: 43 2F 01 OR    REG[0x2F],0x1      (0300)    or    reg[TRIADC_bCounter2_CR0],TRIADC_fDBLK_ENABLE     ; Enable Counter2
05D9: 43 33 01 OR    REG[0x33],0x1      (0301)    or    reg[TRIADC_bCounter3_CR0],TRIADC_fDBLK_ENABLE     ; Enable Counter3
                                        (0302) 
                                        (0303) 
                                        (0304) IF (TRIADC_DATA_FORMAT)                                    ; Only check for Negative numbers if SIGNED result
                                        (0305)    mov   A, [TRIADC_bfStatus]                              ; Get Status with Resolution
                                        (0306)    and   A, TRIADC_bRES_MASK                               ; Mask of resolution
                                        (0307)    index TRIADCMaxNegX4Table                               ; Get Maximum negative value from table
                                        (0308)    mov   [TRIADC_cCounter1U], A                            ; Place result back into MSB of counter
                                        (0309)    mov   [TRIADC_cCounter2U], A                            ; Place result back into MSB of counter
                                        (0310)    mov   [TRIADC_cCounter3U], A                            ; Place result back into MSB of counter
                                        (0311) ELSE
05DC: 55 08 00 MOV   [0x8],0x0          (0312)    mov   [TRIADC_cCounter1U], 00h                          ; Place result back into MSB of counter
05DF: 55 09 00 MOV   [0x9],0x0          (0313)    mov   [TRIADC_cCounter2U], 00h                          ; Place result back into MSB of counter
05E2: 55 0A 00 MOV   [0xA],0x0          (0314)    mov   [TRIADC_cCounter3U], 00h                          ; Place result back into MSB of counter
                                        (0315) ENDIF
                                        (0316) 
                                        (0317)    ;***********************************************
                                        (0318)    ; If the input is muxed with multiple inputs
                                        (0319)    ; this is a good place to change inputs.
                                        (0320)    ;***********************************************
                                        (0321)    ;@PSoC_UserCode_BODY_4@ (Do not change this line.)
                                        (0322)    ;---------------------------------------------------
                                        (0323)    ; Insert your custom code below this banner
                                        (0324)    ;---------------------------------------------------
                                        (0325)    ;   NOTE: interrupt service routines must preserve
                                        (0326)    ;   the values of the A and X CPU registers. At this
                                        (0327)    ;   point A has been preserved on the stack and will
                                        (0328)    ;   be restored before the return from interrupt.
                                        (0329)    ;   However, if you use the X register, you must
                                        (0330)    ;   preserve its value and restore it here.
                                        (0331) 
                                        (0332)    ;---------------------------------------------------
                                        (0333)    ; Insert your custom code above this banner
                                        (0334)    ;---------------------------------------------------
                                        (0335)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0336) 
05E5: 41 83 EF AND   REG[0x83],0xEF     (0337)    and   reg[TRIADC_bfADC1cr3],~TRIADC_fFSW0               ; Take Integrator out of reset
05E8: 41 87 EF AND   REG[0x87],0xEF     (0338)    and   reg[TRIADC_bfADC2cr3],~TRIADC_fFSW0               ; Take Integrator out of reset
05EB: 41 8B EF AND   REG[0x8B],0xEF     (0339)    and   reg[TRIADC_bfADC3cr3],~TRIADC_fFSW0               ; Take Integrator out of reset
                                        (0340) IF TRIADC_NoAZ
05EE: 41 82 DF AND   REG[0x82],0xDF     (0341)    and   reg[TRIADC_bfADC1cr2],~TRIADC_fAutoZero           ; Take Integrator out of AutoZero
05F1: 41 86 DF AND   REG[0x86],0xDF     (0342)    and   reg[TRIADC_bfADC2cr2],~TRIADC_fAutoZero           ; Take Integrator out of AutoZero
05F4: 41 8A DF AND   REG[0x8A],0xDF     (0343)    and   reg[TRIADC_bfADC3cr2],~TRIADC_fAutoZero           ; Take Integrator out of AutoZero
                                        (0344) ENDIF
                                        (0345) 
                                        (0346)    ;****************************************************************************
                                        (0347)    ;M8C_EnableGInt            ; May want to re-enable interrupts at this point,
                                        (0348)    ;                          ; if stack space isn't at a premium.
                                        (0349)    ; NOTE:  this will make system more responsive but, will increase the
                                        (0350)    ;        overall processing time of the A/D calctime.  If an interrupt is
                                        (0351)    ;        taken, it must return within the specified CalcTime to guarantee
                                        (0352)    ;        successful acquisition of the next byte.
                                        (0353)    ;****************************************************************************
                                        (0354) 
                                        (0355) ; ADC1
                                        (0356) IF (TRIADC_DATA_FORMAT)                          ; Only check for Negative numbers if SIGNED result
                                        (0357)                                                  ; Negative Overflow Check
                                        (0358)    tst   [(TRIADC_iResult1 + HighByte)],80h
                                        (0359)    jnz   TRIADC_NOT_2POVFL1
                                        (0360) 
                                        (0361) ENDIF
                                        (0362)                                                  ; Postive Overflow Check
                                        (0363)                                                  ; Get MSB of Max Positive value x4 + 1
05F7: 51 11    MOV   A,[0x11]           (0364)    mov   A,[TRIADC_bfStatus]                     ; Get Status with Resolution
05F9: 21 0F    AND   A,0xF              (0365)    and   A,TRIADC_bRES_MASK                      ; Mask of resolution normalized to 0
05FB: FF 6C    INDEX 0x0569             (0366)    index TRIADCMaxPosX4Table                     ; Get Maximum positive value x4 + 1 from table
05FD: 08       PUSH  A                  (0367)    push  A
05FE: 22 0B    AND   A,[0xB]            (0368)    and   A, [(TRIADC_iResult1 + HighByte)]
0600: A0 0B    JZ    0x060C             (0369)    jz    TRIADC_NOT_POVFL1
                                        (0370)                                                  ; Positive overflow, fix it - set to Max Positive + 1
0602: 18       POP   A                  (0371)    pop   A
0603: 11 01    SUB   A,0x1              (0372)    sub   A, 01h
                                        (0373)                                                  ; Force most positive * 4 into result
0605: 53 0B    MOV   [0xB],A            (0374)    mov   [(TRIADC_iResult1 + HighByte)], A
0607: 55 0C FF MOV   [0xC],0xFF         (0375)    mov   [(TRIADC_iResult1 + LowByte)], ffh
060A: 80 02    JMP   0x060D             (0376)    jmp   TRIADC_NOT_2POVFL1
                                        (0377) TRIADC_NOT_POVFL1:
060C: 18       POP   A                  (0378)    pop   A
                                        (0379) 
                                        (0380) TRIADC_NOT_2POVFL1:
060D: 68 0B    ASR   [0xB]              (0381)    asr   [(TRIADC_iResult1 + HighByte)]          ; Shift MSB and LSB right twice to divide by four
060F: 6E 0C    RRC   [0xC]              (0382)    rrc   [(TRIADC_iResult1 + LowByte)]           ; Remember digital clock 4 times analog clock
0611: 68 0B    ASR   [0xB]              (0383)    asr   [(TRIADC_iResult1 + HighByte)]
0613: 6E 0C    RRC   [0xC]              (0384)    rrc   [(TRIADC_iResult1 + LowByte)]
                                        (0385) 
                                        (0386) ; ADC2
                                        (0387) IF (TRIADC_DATA_FORMAT)                          ; Only check for Negative numbers if SIGNED result
                                        (0388)                                                  ; Negative Overflow Check
                                        (0389)    tst   [(TRIADC_iResult2 + HighByte)],80h
                                        (0390)    jnz   TRIADC_NOT_2POVFL2
                                        (0391) 
                                        (0392) ENDIF
                                        (0393)                                                  ; Postive Overflow Check
                                        (0394)                                                  ; Get MSB of Max Positive value x4 + 1
0615: 51 11    MOV   A,[0x11]           (0395)    mov   A,[TRIADC_bfStatus]                     ; Get Status with Resolution
0617: 21 0F    AND   A,0xF              (0396)    and   A,TRIADC_bRES_MASK                      ; Mask of resolution normalized to 0
0619: FF 4E    INDEX 0x0569             (0397)    index TRIADCMaxPosX4Table                     ; Get Maximum positive value x4 + 1 from table
061B: 08       PUSH  A                  (0398)    push  A
061C: 22 0D    AND   A,[0xD]            (0399)    and   A, [(TRIADC_iResult2 + HighByte)]
061E: A0 0B    JZ    0x062A             (0400)    jz    TRIADC_NOT_POVFL2
                                        (0401)                                                  ; Positive overflow, fix it - set to Max Positive + 1
0620: 18       POP   A                  (0402)    pop   A
0621: 11 01    SUB   A,0x1              (0403)    sub   A, 01h
                                        (0404)                                                  ; Force most positive * 4 into result
0623: 53 0D    MOV   [0xD],A            (0405)    mov   [(TRIADC_iResult2 + HighByte)], A
0625: 55 0E FF MOV   [0xE],0xFF         (0406)    mov   [(TRIADC_iResult2 + LowByte)], ffh
0628: 80 02    JMP   0x062B             (0407)    jmp   TRIADC_NOT_2POVFL2
                                        (0408) TRIADC_NOT_POVFL2:
062A: 18       POP   A                  (0409)    pop   A
                                        (0410) 
                                        (0411) TRIADC_NOT_2POVFL2:
062B: 68 0D    ASR   [0xD]              (0412)    asr   [(TRIADC_iResult2 + HighByte)]          ; Shift MSB and LSB right twice to divide by four
062D: 6E 0E    RRC   [0xE]              (0413)    rrc   [(TRIADC_iResult2 + LowByte)]           ; Remember digital clock 4 times analog clock
062F: 68 0D    ASR   [0xD]              (0414)    asr   [(TRIADC_iResult2 + HighByte)]
0631: 6E 0E    RRC   [0xE]              (0415)    rrc   [(TRIADC_iResult2 + LowByte)]
                                        (0416) 
                                        (0417) ; ADC3
                                        (0418) IF (TRIADC_DATA_FORMAT)                          ; Only check for Negative numbers if SIGNED result
                                        (0419)                                                  ; Negative Overflow Check
                                        (0420)    tst   [(TRIADC_iResult3 + HighByte)],80h
                                        (0421)    jnz   TRIADC_NOT_2POVFL3
                                        (0422) 
                                        (0423) ENDIF
                                        (0424)                                                  ; Postive Overflow Check
                                        (0425)                                                  ; Get MSB of Max Positive value x4 + 1
0633: 51 11    MOV   A,[0x11]           (0426)    mov   A,[TRIADC_bfStatus]                     ; Get Status with Resolution
0635: 21 0F    AND   A,0xF              (0427)    and   A,TRIADC_bRES_MASK                      ; Mask of resolution normalized to 0
0637: FF 30    INDEX 0x0569             (0428)    index TRIADCMaxPosX4Table                     ; Get Maximum positive value x4 + 1 from table
0639: 08       PUSH  A                  (0429)    push  A
063A: 22 0F    AND   A,[0xF]            (0430)    and   A, [(TRIADC_iResult3 + HighByte)]
063C: A0 0B    JZ    0x0648             (0431)    jz    TRIADC_NOT_POVFL3
                                        (0432)                                                  ; Positive overflow, fix it - set to Max Positive + 1
063E: 18       POP   A                  (0433)    pop   A
063F: 11 01    SUB   A,0x1              (0434)    sub   A, 01h
                                        (0435)                                                  ; Force most positive * 4 into result
0641: 53 0F    MOV   [0xF],A            (0436)    mov   [(TRIADC_iResult3 + HighByte)], A
0643: 55 10 FF MOV   [0x10],0xFF        (0437)    mov   [(TRIADC_iResult3 + LowByte)], ffh
0646: 80 02    JMP   0x0649             (0438)    jmp   TRIADC_NOT_2POVFL3
                                        (0439) TRIADC_NOT_POVFL3:
0648: 18       POP   A                  (0440)    pop   A
                                        (0441) 
                                        (0442) TRIADC_NOT_2POVFL3:
0649: 68 0F    ASR   [0xF]              (0443)    asr   [(TRIADC_iResult3 + HighByte)]          ; Shift MSB and LSB right twice to divide by four
064B: 6E 10    RRC   [0x10]             (0444)    rrc   [(TRIADC_iResult3 + LowByte)]           ; Remember digital clock 4 times analog clock
064D: 68 0F    ASR   [0xF]              (0445)    asr   [(TRIADC_iResult3 + HighByte)]
064F: 6E 10    RRC   [0x10]             (0446)    rrc   [(TRIADC_iResult3 + LowByte)]
                                        (0447) 
                                        (0448) 
                                        (0449)    ;**********************************************
                                        (0450)    ; Data is ready at this point.
                                        (0451)    ; If processing Data at Interrupt level - add
                                        (0452)    ;     User Code to handle the data
                                        (0453)    ;**********************************************
                                        (0454)    ;@PSoC_UserCode_BODY_5@ (Do not change this line.)
                                        (0455)    ;---------------------------------------------------
                                        (0456)    ; Insert your custom code below this banner
                                        (0457)    ;---------------------------------------------------
                                        (0458)    ;   NOTE: interrupt service routines must preserve
                                        (0459)    ;   the values of the A and X CPU registers. At this
                                        (0460)    ;   point A has been preserved on the stack and will
                                        (0461)    ;   be restored before the return from interrupt.
                                        (0462)    ;   However, if you use the X register, you must
                                        (0463)    ;   preserve its value and restore it here.
                                        (0464) 
                                        (0465)    ;---------------------------------------------------
                                        (0466)    ; Insert your custom code above this banner
                                        (0467)    ;---------------------------------------------------
                                        (0468)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0469) 
0651: 18       POP   A                  (0470)    pop   A                                       ; Restore A, not used any more
                                        (0471) 
0652: 2E 11 10 OR    [0x11],0x10        (0472)    or    [TRIADC_bfStatus],TRIADC_fDATA_READY    ; Set Data ready bit
                                        (0473) 
0655: 47 12 FF TST   [0x12],0xFF        (0474)    tst   [TRIADC_bSampC], ffh                    ; If sample_counter == 0 -->> continuous data collection
0658: A0 2F    JZ    0x0688             (0475)    jz    TRIADC_END_PWM16_ISR
                                        (0476) 
065A: 7A 12    DEC   [0x12]             (0477)    dec   [TRIADC_bSampC]                         ; Dec sample counter and check for zero
065C: B0 2B    JNZ   0x0688             (0478)    jnz   TRIADC_END_PWM16_ISR
                                        (0479) 
                                        (0480)    ;**********************************************
                                        (0481)    ; Turn off ADC
                                        (0482)    ;**********************************************
065E: 41 27 FE AND   REG[0x27],0xFE     (0483)    and   reg[TRIADC_fPWM_LSB_CR0], ~TRIADC_fDBLK_ENABLE        ; Disable the PWM
                                        (0484) 
0661: 41 23 FE AND   REG[0x23],0xFE     (0485)    and   reg[TRIADC_bCounter1_CR0], ~TRIADC_fDBLK_ENABLE           ; Disable the Counter
0664: 41 2F FE AND   REG[0x2F],0xFE     (0486)    and   reg[TRIADC_bCounter2_CR0], ~TRIADC_fDBLK_ENABLE           ; Disable the Counter
0667: 41 33 FE AND   REG[0x33],0xFE     (0487)    and   reg[TRIADC_bCounter3_CR0], ~TRIADC_fDBLK_ENABLE           ; Disable the Counter
                                        (0488) 
                                        (0489) IF TRIADC_NoAZ
066A: 43 82 20 OR    REG[0x82],0x20     (0490)    or    reg[TRIADC_bfADC1cr2], TRIADC_fAutoZero               ; Put the Integrator into Autozero mode
066D: 43 86 20 OR    REG[0x86],0x20     (0491)    or    reg[TRIADC_bfADC2cr2], TRIADC_fAutoZero               ; Put the Integrator into Autozero mode
0670: 43 8A 20 OR    REG[0x8A],0x20     (0492)    or    reg[TRIADC_bfADC3cr2], TRIADC_fAutoZero               ; Put the Integrator into Autozero mode
                                        (0493) ENDIF
                                        (0494) 
0673: 43 83 10 OR    REG[0x83],0x10     (0495)    or    reg[TRIADC_bfADC1cr3], TRIADC_fFSW0                   ; Put Integrator into reset
0676: 43 87 10 OR    REG[0x87],0x10     (0496)    or    reg[TRIADC_bfADC2cr3], TRIADC_fFSW0                   ; Put Integrator into reset
0679: 43 8B 10 OR    REG[0x8B],0x10     (0497)    or    reg[TRIADC_bfADC3cr3], TRIADC_fFSW0                   ; Put Integrator into reset
                                        (0498) 
067C: 41 E1 FB AND   REG[0xE1],0xFB     (0499)    and   reg[TRIADC_bfPWM16_INT_REG], ~TRIADC_bfPWM16_Mask     ; Disable interrupts
067F: 41 E1 FE AND   REG[0xE1],0xFE     (0500)    and   reg[TRIADC_bfCounter1_INT_REG], ~TRIADC_bfCounter1_Mask
0682: 41 E1 F7 AND   REG[0xE1],0xF7     (0501)    and   reg[TRIADC_bfCounter2_INT_REG], ~TRIADC_bfCounter2_Mask
0685: 41 E1 EF AND   REG[0xE1],0xEF     (0502)    and   reg[TRIADC_bfCounter3_INT_REG], ~TRIADC_bfCounter3_Mask
                                        (0503) 
                                        (0504) 
                                        (0505) TRIADC_END_PWM16_ISR:
0688: 7E       RETI                     (0506)    reti
                                        (0507) 
                                        (0508) TRIADC_APIINT_END:
FILE: lib\triadc.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   TRIADC.asm
                                        (0004) ;;  Version: 2.20, Updated on 2012/9/21 at 11:59:44
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: TriADC User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "TRIADC.inc"
                                        (0023) include "m8c.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  TRIADC_Start
                                        (0030) export _TRIADC_Start
                                        (0031) export  TRIADC_SetPower
                                        (0032) export _TRIADC_SetPower
                                        (0033) export  TRIADC_Stop
                                        (0034) export _TRIADC_Stop
                                        (0035) export  TRIADC_GetSamples
                                        (0036) export _TRIADC_GetSamples
                                        (0037) export  TRIADC_StopAD
                                        (0038) export _TRIADC_StopAD
                                        (0039) export  TRIADC_fIsData
                                        (0040) export _TRIADC_fIsData
                                        (0041) export  TRIADC_fIsDataAvailable
                                        (0042) export _TRIADC_fIsDataAvailable
                                        (0043) export  TRIADC_iGetData1
                                        (0044) export _TRIADC_iGetData1
                                        (0045) export  TRIADC_iGetData2
                                        (0046) export _TRIADC_iGetData2
                                        (0047) export  TRIADC_iGetData3
                                        (0048) export _TRIADC_iGetData3
                                        (0049) export  TRIADC_ClearFlag
                                        (0050) export _TRIADC_ClearFlag
                                        (0051) export  TRIADC_iGetData1ClearFlag
                                        (0052) export _TRIADC_iGetData1ClearFlag
                                        (0053) export  TRIADC_iGetData2ClearFlag
                                        (0054) export _TRIADC_iGetData2ClearFlag
                                        (0055) export  TRIADC_iGetData3ClearFlag
                                        (0056) export _TRIADC_iGetData3ClearFlag
                                        (0057) export  TRIADC_SetResolution
                                        (0058) export _TRIADC_SetResolution
                                        (0059) 
                                        (0060) ;-----------------------------------------------
                                        (0061) ;  EQUATES
                                        (0062) ;-----------------------------------------------
                                        (0063) ; Calctime parameters
                                        (0064) wCalcTime:     equ   TRIADC_bCALCTIME
                                        (0065) 
                                        (0066) ; Constants
                                        (0067) LowByte:       equ 1
                                        (0068) HighByte:      equ 0
                                        (0069) 
                                        (0070) AREA UserModules (ROM, REL)
                                        (0071) .SECTION
                                        (0072) ;-----------------------------------------------------------------------------
                                        (0073) ;  FUNCTION NAME: TRIADC_Start
                                        (0074) ;  FUNCTION NAME: TRIADC_SetPower
                                        (0075) ;
                                        (0076) ;  DESCRIPTION:
                                        (0077) ;     Applies power setting to the module's analog PSoc block.
                                        (0078) ;
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:
                                        (0082) ;    A contains the power setting (0 - 3)
                                        (0083) ;
                                        (0084) ;  RETURNS: none
                                        (0085) ;
                                        (0086) ;  SIDE EFFECTS:
                                        (0087) ;    The A and X registers may be modified by this or future implementations
                                        (0088) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0089) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0090) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0091) ;    functions.
                                        (0092) ;          
                                        (0093) ;    Currently only the page pointer registers listed below are modified: 
                                        (0094) ;          CUR_PP
                                        (0095) ;
                                        (0096)  TRIADC_Start:
                                        (0097) _TRIADC_Start:
                                        (0098)  TRIADC_SetPower:
                                        (0099) _TRIADC_SetPower:
                                        (0100)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0101)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0102)    RAM_SETPAGE_CUR >TRIADC_bfStatus
0689: 21 03    AND   A,0x3              (0103)    and   A,TRIADC_bfPOWERMASK                        ; Mask only the valid power setting bits
068B: 4F       MOV   X,SP               (0104)    mov   X, SP                                       ; Get location of next location on stack
068C: 08       PUSH  A                  (0105)    push  A                                           ; Save power value on temp location
                                        (0106) 
                                        (0107)                                                      ; Set power for ADC1
068D: 5D 83    MOV   A,REG[0x83]        (0108)    mov   A, reg[TRIADC_bfADC1cr3]                    ; Get current value of ADC1cr3
068F: 21 FC    AND   A,0xFC             (0109)    and   A, ~TRIADC_bfPOWERMASK                      ; Mask off old power value
0691: 2B 00    OR    A,[X+0]            (0110)    or    A, [X]                                      ; OR in new power value
0693: 29 F0    OR    A,0xF0             (0111)    or    A, f0h                                      ; Make sure other register is set correctly
0695: 60 83    MOV   REG[0x83],A        (0112)    mov   reg[TRIADC_bfADC1cr3], A                    ; Reload CR with new power value
                                        (0113) 
                                        (0114)                                                      ; Set power for ADC2
0697: 5D 87    MOV   A,REG[0x87]        (0115)    mov   A, reg[TRIADC_bfADC2cr3]                    ; Get current value of ADC2cr3
0699: 21 FC    AND   A,0xFC             (0116)    and   A, ~TRIADC_bfPOWERMASK                      ; Mask off old power value
069B: 2B 00    OR    A,[X+0]            (0117)    or    A, [X]                                      ; OR in new power value
069D: 29 F0    OR    A,0xF0             (0118)    or    A, f0h                                      ; Make sure other register is set correctly
069F: 60 87    MOV   REG[0x87],A        (0119)    mov   reg[TRIADC_bfADC2cr3], A                    ; Reload CR with new power value
                                        (0120) 
                                        (0121)                                                      ; Set power for ADC3
06A1: 5D 8B    MOV   A,REG[0x8B]        (0122)    mov   A, reg[TRIADC_bfADC3cr3]                    ; Get current value of ADC3cr3
06A3: 21 FC    AND   A,0xFC             (0123)    and   A, ~TRIADC_bfPOWERMASK                      ; Mask off old power value
06A5: 2B 00    OR    A,[X+0]            (0124)    or    A, [X]                                      ; OR in new power value
06A7: 29 F0    OR    A,0xF0             (0125)    or    A, f0h                                      ; Make sure other register is set correctly
06A9: 60 8B    MOV   REG[0x8B],A        (0126)    mov   reg[TRIADC_bfADC3cr3], A                    ; Reload CR with new power value
                                        (0127) 
06AB: 49 82 01 TST   REG[0x82],0x1      (0128)    tst   reg[TRIADC_bfADC1cr2], TRIADC_fRES_SET
06AE: A0 05    JZ    0x06B4             (0129)    jz    .DoNotLoadRes
06B0: 50 03    MOV   A,0x3              (0130)    mov   A,TRIADC_bNUMBITS - TRIADC_bMINRES                     ; get and set the resolution
06B2: 53 11    MOV   [0x11],A           (0131)    mov   [TRIADC_bfStatus], A              ; place it in the status variable
                                        (0132) .DoNotLoadRes:
                                        (0133) 
06B4: 18       POP   A                  (0134)    pop   A                                           ; Restore the stack and power value
                                        (0135)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0136)    RAM_EPILOGUE RAM_USE_CLASS_4
06B5: 7F       RET                      (0137)    ret
                                        (0138) .ENDSECTION
                                        (0139) 
                                        (0140) .SECTION
                                        (0141) ;-----------------------------------------------------------------------------
                                        (0142) ;  FUNCTION NAME: TRIADC_Stop
                                        (0143) ;
                                        (0144) ;  DESCRIPTION:
                                        (0145) ;    Removes power from the module's analog PSoc block, but the digital
                                        (0146) ;    blocks keep on running.
                                        (0147) ;
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;
                                        (0150) ;  ARGUMENTS:  none
                                        (0151) ;
                                        (0152) ;  RETURNS:  none
                                        (0153) ;
                                        (0154) ;  SIDE EFFECTS:
                                        (0155) ;    The A and X registers may be modified by this or future implementations
                                        (0156) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0157) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0158) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0159) ;    functions.
                                        (0160) ;
                                        (0161)  TRIADC_Stop:
                                        (0162) _TRIADC_Stop:
                                        (0163)    RAM_PROLOGUE RAM_USE_CLASS_1
06B6: 41 83 FC AND   REG[0x83],0xFC     (0164)    and   reg[TRIADC_bfADC1cr3], ~TRIADC_bfPOWERMASK
06B9: 41 87 FC AND   REG[0x87],0xFC     (0165)    and   reg[TRIADC_bfADC2cr3], ~TRIADC_bfPOWERMASK
06BC: 41 8B FC AND   REG[0x8B],0xFC     (0166)    and   reg[TRIADC_bfADC3cr3], ~TRIADC_bfPOWERMASK
                                        (0167)    RAM_EPILOGUE RAM_USE_CLASS_1
06BF: 7F       RET                      (0168)    ret
                                        (0169) .ENDSECTION
                                        (0170) 
                                        (0171) .SECTION
                                        (0172) ;-----------------------------------------------------------------------------
                                        (0173) ;  FUNCTION NAME: TRIADC_Get_Samples
                                        (0174) ;
                                        (0175) ;  DESCRIPTION:
                                        (0176) ;    Starts the A/D convertor and will place data is memory.  A flag
                                        (0177) ;    is set whenever a new data value is available.
                                        (0178) ;
                                        (0179) ;-----------------------------------------------------------------------------
                                        (0180) ;
                                        (0181) ;  ARGUMENTS:
                                        (0182) ;    A Contains the number of samples to perform. (0 is continous)
                                        (0183) ;
                                        (0184) ;  RETURNS: none
                                        (0185) ;
                                        (0186) ;  SIDE EFFECTS:
                                        (0187) ;    The A and X registers may be modified by this or future implementations
                                        (0188) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0189) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0190) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0191) ;    functions.
                                        (0192) ;          
                                        (0193) ;    Currently only the page pointer registers listed below are modified: 
                                        (0194) ;          CUR_PP
                                        (0195) ;
                                        (0196)  TRIADC_GetSamples:
                                        (0197) _TRIADC_GetSamples:
                                        (0198)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0199)    RAM_SETPAGE_CUR >TRIADC_bSampC
06C0: 53 12    MOV   [0x12],A           (0200)    mov   [TRIADC_bSampC], A                                ; Store sample count
                                        (0201) 
06C2: 51 11    MOV   A,[0x11]           (0202)    mov   A,[TRIADC_bfStatus]                               ; get and set the resolution
06C4: 21 0F    AND   A,0xF              (0203)    and   A,TRIADC_bRES_MASK
06C6: 01 07    ADD   A,0x7              (0204)    add   A,TRIADC_bMINRES
06C8: 90 A5    CALL  _TRIADC_SetResolution(0205)    call  TRIADC_SetResolution
                                        (0206) 
                                        (0207) TRIADC_LoadMSBCounter:                                     ; The PWM has been setup by SetResolution, now set the upper
                                        (0208)                                                            ; counter which will be the same as the period.
                                        (0209)                                                            ; Reset MSB of counter to most negative value
                                        (0210)    RAM_SETPAGE_CUR >TRIADC_cCounter1U
06CA: 5D 2A    MOV   A,REG[0x2A]        (0211)    mov   A,reg[TRIADC_bPWM_IntTime_MSB]                    ; Get MSB of PWM and move it into RAM
06CC: 53 08    MOV   [0x8],A            (0212)    mov   [TRIADC_cCounter1U], A                            ; Use counter as temp location
06CE: 50 00    MOV   A,0x0              (0213)    mov   A, 00h                                            ; Load A with zero for the calculation
06D0: 12 08    SUB   A,[0x8]            (0214)    sub   A, [TRIADC_cCounter1U]                            ; 0 - MSB_PWM = MSB_of_most_neg_value
06D2: 67       ASR   A                  (0215)    asr   A                                                 ; Half the range (+ and -)
                                        (0216) IF (TRIADC_DATA_FORMAT)
                                        (0217)    mov   [TRIADC_cCounter1U], A                            ; Place result back into MSB of counter1
                                        (0218)    mov   [TRIADC_cCounter2U], A                            ; Place result back into MSB of counter2
                                        (0219)    mov   [TRIADC_cCounter3U], A                            ; Place result back into MSB of counter3
                                        (0220) ELSE
06D3: 55 08 00 MOV   [0x8],0x0          (0221)    mov   [TRIADC_cCounter1U], 00h                          ; Always start at zero for unsigned values for ADC1
06D6: 55 09 00 MOV   [0x9],0x0          (0222)    mov   [TRIADC_cCounter2U], 00h                          ; Always start at zero for unsigned values for ADC2
06D9: 55 0A 00 MOV   [0xA],0x0          (0223)    mov   [TRIADC_cCounter3U], 00h                          ; Always start at zero for unsigned values for ADC3
                                        (0224) ENDIF
06DC: 5D 26    MOV   A,REG[0x26]        (0225)    mov   A, reg[TRIADC_bPWM_IntTime_LSB]                   ; Dummy Read  - required do not remove
06DE: 62 21 FF MOV   REG[0x21],0xFF     (0226)    mov   reg[TRIADC_bPeriod1], FFh                         ; Make sure counter1 starts at FF
06E1: 62 2D FF MOV   REG[0x2D],0xFF     (0227)    mov   reg[TRIADC_bPeriod2], FFh                         ; Make sure counter1 starts at FF
06E4: 62 31 FF MOV   REG[0x31],0xFF     (0228)    mov   reg[TRIADC_bPeriod3], FFh                         ; Make sure counter1 starts at FF
                                        (0229) 
06E7: 41 83 EF AND   REG[0x83],0xEF     (0230)    and   reg[TRIADC_bfADC1cr3],~TRIADC_fFSW0               ; Take Integrator out of reset
06EA: 41 87 EF AND   REG[0x87],0xEF     (0231)    and   reg[TRIADC_bfADC2cr3],~TRIADC_fFSW0               ; Take Integrator out of reset
06ED: 41 8B EF AND   REG[0x8B],0xEF     (0232)    and   reg[TRIADC_bfADC3cr3],~TRIADC_fFSW0               ; Take Integrator out of reset
                                        (0233) IF TRIADC_NoAZ
06F0: 41 82 DF AND   REG[0x82],0xDF     (0234)     and  reg[TRIADC_bfADC1cr2],~TRIADC_fAutoZero           ; Take Integrator out of AutoZero
06F3: 41 86 DF AND   REG[0x86],0xDF     (0235)     and  reg[TRIADC_bfADC2cr2],~TRIADC_fAutoZero           ; Take Integrator out of AutoZero
06F6: 41 8A DF AND   REG[0x8A],0xDF     (0236)     and  reg[TRIADC_bfADC3cr2],~TRIADC_fAutoZero           ; Take Integrator out of AutoZero
                                        (0237) ENDIF
                                        (0238) 
                                        (0239)                                                                ; Enable the A/D and Start it!
06F9: 43 23 05 OR    REG[0x23],0x5      (0240)    or    reg[TRIADC_bCounter1_CR0], (TRIADC_fDBLK_ENABLE|TRIADC_fPULSE_WIDE)   ; Enable the Counter
06FC: 43 2F 05 OR    REG[0x2F],0x5      (0241)    or    reg[TRIADC_bCounter2_CR0], (TRIADC_fDBLK_ENABLE|TRIADC_fPULSE_WIDE)   ; Enable the Counter
06FF: 43 33 05 OR    REG[0x33],0x5      (0242)    or    reg[TRIADC_bCounter3_CR0], (TRIADC_fDBLK_ENABLE|TRIADC_fPULSE_WIDE)   ; Enable the Counter
0702: 43 27 01 OR    REG[0x27],0x1      (0243)    or    reg[TRIADC_fPWM_LSB_CR0], TRIADC_fDBLK_ENABLE         ; Enable PWM
0705: 43 E1 04 OR    REG[0xE1],0x4      (0244)    or    reg[TRIADC_bfPWM16_INT_REG], TRIADC_bfPWM16_Mask      ; Enable PWM and Counter interrupts
0708: 43 E1 01 OR    REG[0xE1],0x1      (0245)    or    reg[TRIADC_bfCounter1_INT_REG], TRIADC_bfCounter1_Mask
070B: 43 E1 08 OR    REG[0xE1],0x8      (0246)    or    reg[TRIADC_bfCounter2_INT_REG], TRIADC_bfCounter2_Mask
070E: 43 E1 10 OR    REG[0xE1],0x10     (0247)    or    reg[TRIADC_bfCounter3_INT_REG], TRIADC_bfCounter3_Mask
                                        (0248)    RAM_EPILOGUE RAM_USE_CLASS_4
0711: 7F       RET                      (0249)    ret
                                        (0250) .ENDSECTION
                                        (0251) 
                                        (0252) .SECTION
                                        (0253) ;-----------------------------------------------------------------------------
                                        (0254) ;  FUNCTION NAME: TRIADC_StopAD
                                        (0255) ;
                                        (0256) ;  DESCRIPTION:
                                        (0257) ;    Completely shuts down the A/D is an orderly manner.  Both the
                                        (0258) ;    Timer and Counter are disabled and their interrupts are deactivated.
                                        (0259) ;
                                        (0260) ;-----------------------------------------------------------------------------
                                        (0261) ;
                                        (0262) ;  ARGUMENTS: none
                                        (0263) ;
                                        (0264) ;  RETURNS: none
                                        (0265) ;
                                        (0266) ;  SIDE EFFECTS:
                                        (0267) ;    The A and X registers may be modified by this or future implementations
                                        (0268) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0269) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0270) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0271) ;    functions.
                                        (0272) ;
                                        (0273)  TRIADC_StopAD:
                                        (0274) _TRIADC_StopAD:
                                        (0275)    RAM_PROLOGUE RAM_USE_CLASS_1
0712: 41 27 FE AND   REG[0x27],0xFE     (0276)    and   reg[TRIADC_fPWM_LSB_CR0], ~TRIADC_fDBLK_ENABLE        ; Disable the PWM
                                        (0277) 
0715: 41 23 FE AND   REG[0x23],0xFE     (0278)    and   reg[TRIADC_bCounter1_CR0], ~TRIADC_fDBLK_ENABLE           ; Disable the Counter
0718: 41 2F FE AND   REG[0x2F],0xFE     (0279)    and   reg[TRIADC_bCounter2_CR0], ~TRIADC_fDBLK_ENABLE           ; Disable the Counter
071B: 41 33 FE AND   REG[0x33],0xFE     (0280)    and   reg[TRIADC_bCounter3_CR0], ~TRIADC_fDBLK_ENABLE           ; Disable the Counter
                                        (0281) 
                                        (0282) IF TRIADC_NoAZ
071E: 43 82 20 OR    REG[0x82],0x20     (0283)    or    reg[TRIADC_bfADC1cr2], TRIADC_fAutoZero               ; Put the Integrator into Autozero mode
0721: 43 86 20 OR    REG[0x86],0x20     (0284)    or    reg[TRIADC_bfADC2cr2], TRIADC_fAutoZero               ; Put the Integrator into Autozero mode
0724: 43 8A 20 OR    REG[0x8A],0x20     (0285)    or    reg[TRIADC_bfADC3cr2], TRIADC_fAutoZero               ; Put the Integrator into Autozero mode
                                        (0286) ENDIF
                                        (0287) 
0727: 43 83 10 OR    REG[0x83],0x10     (0288)    or   reg[TRIADC_bfADC1cr3], TRIADC_fFSW0                    ; Put Integrator into reset
072A: 43 87 10 OR    REG[0x87],0x10     (0289)    or   reg[TRIADC_bfADC2cr3], TRIADC_fFSW0                    ; Put Integrator into reset
072D: 43 8B 10 OR    REG[0x8B],0x10     (0290)    or   reg[TRIADC_bfADC3cr3], TRIADC_fFSW0                    ; Put Integrator into reset
                                        (0291) 
0730: 08       PUSH  A                  (0292)    push A
0731: 41 E1 FB AND   REG[0xE1],0xFB     
0734: 41 E1 FE AND   REG[0xE1],0xFE     
0737: 41 E1 F7 AND   REG[0xE1],0xF7     
073A: 41 E1 EF AND   REG[0xE1],0xEF     
                                        (0293)    M8C_DisableIntMask TRIADC_bfPWM16_INT_REG, TRIADC_bfPWM16_Mask      ; Disable interrupts
                                        (0294)    M8C_DisableIntMask TRIADC_bfCounter1_INT_REG, TRIADC_bfCounter1_Mask
                                        (0295)    M8C_DisableIntMask TRIADC_bfCounter2_INT_REG, TRIADC_bfCounter2_Mask
                                        (0296)    M8C_DisableIntMask TRIADC_bfCounter3_INT_REG, TRIADC_bfCounter3_Mask
073D: 18       POP   A                  (0297)    pop  A
                                        (0298)    RAM_EPILOGUE RAM_USE_CLASS_1
073E: 7F       RET                      (0299)    ret
                                        (0300) .ENDSECTION
                                        (0301) 
                                        (0302) .SECTION
                                        (0303) ;-----------------------------------------------------------------------------
                                        (0304) ;  FUNCTION NAME: TRIADC_fIsData
                                        (0305) ;  FUNCTION NAME: TRIADC_fIsDataAvailable
                                        (0306) ;
                                        (0307) ;  DESCRIPTION:
                                        (0308) ;    Returns the status of the A/D Data is set whenever a new data value
                                        (0309) ;    is available.
                                        (0310) ;
                                        (0311) ;-----------------------------------------------------------------------------
                                        (0312) ;
                                        (0313) ;  ARGUMENTS: none
                                        (0314) ;
                                        (0315) ;  RETURNS: A returns data status in A.  A != 0  Data available
                                        (0316) ;                                        A  = 0  Data not available
                                        (0317) ;
                                        (0318) ;  SIDE EFFECTS:
                                        (0319) ;    The A and X registers may be modified by this or future implementations
                                        (0320) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0321) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0322) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0323) ;    functions.
                                        (0324) ;          
                                        (0325) ;    Currently only the page pointer registers listed below are modified: 
                                        (0326) ;          CUR_PP
                                        (0327) ;
                                        (0328)  TRIADC_fIsData:
                                        (0329) _TRIADC_fIsData:
                                        (0330)  TRIADC_fIsDataAvailable:
                                        (0331) _TRIADC_fIsDataAvailable:
                                        (0332)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0333)    RAM_SETPAGE_CUR >TRIADC_bfStatus
073F: 51 11    MOV   A,[0x11]           (0334)    mov   A, [TRIADC_bfStatus]                         ; Get status byte
0741: 21 10    AND   A,0x10             (0335)    and   A, TRIADC_fDATA_READY                        ; Mask off other bits
                                        (0336)    RAM_EPILOGUE RAM_USE_CLASS_4
0743: 7F       RET                      (0337)    ret
                                        (0338) .ENDSECTION
                                        (0339) 
                                        (0340) .SECTION
                                        (0341) ;-----------------------------------------------------------------------------
                                        (0342) ;  FUNCTION NAME: TRIADC_iGetData1
                                        (0343) ;  FUNCTION NAME: TRIADC_iGetData1ClearFlag
                                        (0344) ;
                                        (0345) ;  DESCRIPTION:
                                        (0346) ;    Returns the data from the A/D.  Does not check if data is available.
                                        (0347) ;
                                        (0348) ;-----------------------------------------------------------------------------
                                        (0349) ;
                                        (0350) ;  ARGUMENTS: none
                                        (0351) ;
                                        (0352) ;  RETURNS:
                                        (0353) ;     X:A contains 16 bit ADC result.  X = MSB, A = LSB
                                        (0354) ;
                                        (0355) ;  SIDE EFFECTS:
                                        (0356) ;    The A and X registers may be modified by this or future implementations
                                        (0357) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0358) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0359) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0360) ;    functions.
                                        (0361) ;          
                                        (0362) ;    Currently only the page pointer registers listed below are modified: 
                                        (0363) ;          CUR_PP
                                        (0364) ;
                                        (0365)  TRIADC_iGetData1ClearFlag:
                                        (0366) _TRIADC_iGetData1ClearFlag:
                                        (0367)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0368)    RAM_SETPAGE_CUR >TRIADC_bfStatus
0744: 26 11 EF AND   [0x11],0xEF        (0369)    and   [TRIADC_bfStatus], ~TRIADC_fDATA_READY  ; Clear Data ready bit
0747: 58 0B    MOV   X,[0xB]            (0370)    mov   X, [(TRIADC_iResult1 + HighByte)]
0749: 51 0C    MOV   A,[0xC]            (0371)    mov   A, [(TRIADC_iResult1 + LowByte)]
                                        (0372)    RAM_EPILOGUE RAM_USE_CLASS_4
074B: 7F       RET                      (0373)    ret
                                        (0374) 
                                        (0375)  TRIADC_iGetData1:
                                        (0376) _TRIADC_iGetData1:
                                        (0377)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0378)    RAM_SETPAGE_CUR >TRIADC_bfStatus
074C: 58 0B    MOV   X,[0xB]            (0379)    mov   X, [(TRIADC_iResult1 + HighByte)]
074E: 51 0C    MOV   A,[0xC]            (0380)    mov   A, [(TRIADC_iResult1 + LowByte)]
                                        (0381)    RAM_EPILOGUE RAM_USE_CLASS_4
0750: 7F       RET                      (0382)    ret
                                        (0383) .ENDSECTION
                                        (0384) 
                                        (0385) .SECTION
                                        (0386) ;-----------------------------------------------------------------------------
                                        (0387) ;  FUNCTION NAME: TRIADC_iGetData2
                                        (0388) ;  FUNCTION NAME: TRIADC_iGetData2ClearFlag
                                        (0389) ;
                                        (0390) ;  DESCRIPTION:
                                        (0391) ;    Returns the data from the A/D.  Does not check if data is available.
                                        (0392) ;
                                        (0393) ;-----------------------------------------------------------------------------
                                        (0394) ;
                                        (0395) ;  ARGUMENTS: none
                                        (0396) ;
                                        (0397) ;  RETURNS:
                                        (0398) ;     X:A contains 16 bit ADC result.  X = MSB, A = LSB
                                        (0399) ;
                                        (0400) ;  SIDE EFFECTS:
                                        (0401) ;    The A and X registers may be modified by this or future implementations
                                        (0402) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0403) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0404) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0405) ;    functions.
                                        (0406) ;          
                                        (0407) ;    Currently only the page pointer registers listed below are modified: 
                                        (0408) ;          CUR_PP
                                        (0409) ;
                                        (0410)  TRIADC_iGetData2ClearFlag:
                                        (0411) _TRIADC_iGetData2ClearFlag:
                                        (0412)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0413)    RAM_SETPAGE_CUR >TRIADC_bfStatus
0751: 26 11 EF AND   [0x11],0xEF        (0414)    and   [TRIADC_bfStatus], ~TRIADC_fDATA_READY  ; Clear Data ready bit
0754: 58 0D    MOV   X,[0xD]            (0415)    mov   X, [(TRIADC_iResult2 + HighByte)]
0756: 51 0E    MOV   A,[0xE]            (0416)    mov   A, [(TRIADC_iResult2 + LowByte)]
                                        (0417)    RAM_EPILOGUE RAM_USE_CLASS_4
0758: 7F       RET                      (0418)    ret
                                        (0419) 
                                        (0420)  TRIADC_iGetData2:
                                        (0421) _TRIADC_iGetData2:
                                        (0422)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0423)    RAM_SETPAGE_CUR >TRIADC_bfStatus
0759: 58 0D    MOV   X,[0xD]            (0424)    mov   X, [(TRIADC_iResult2 + HighByte)]
075B: 51 0E    MOV   A,[0xE]            (0425)    mov   A, [(TRIADC_iResult2 + LowByte)]
                                        (0426)    RAM_EPILOGUE RAM_USE_CLASS_4
075D: 7F       RET                      (0427)    ret
                                        (0428) .ENDSECTION
                                        (0429) 
                                        (0430) .SECTION
                                        (0431) ;-----------------------------------------------------------------------------
                                        (0432) ;  FUNCTION NAME: TRIADC_iGetData3
                                        (0433) ;  FUNCTION NAME: TRIADC_iGetData3ClearFlag
                                        (0434) ;
                                        (0435) ;  DESCRIPTION:
                                        (0436) ;    Returns the data from the A/D.  Does not check if data is available.
                                        (0437) ;
                                        (0438) ;-----------------------------------------------------------------------------
                                        (0439) ;
                                        (0440) ;  ARGUMENTS:
                                        (0441) ;
                                        (0442) ;  RETURNS:
                                        (0443) ;     X:A contains 16 bit ADC result.  X = MSB, A = LSB
                                        (0444) ;
                                        (0445) ;  SIDE EFFECTS:
                                        (0446) ;    The A and X registers may be modified by this or future implementations
                                        (0447) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0448) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0449) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0450) ;    functions.
                                        (0451) ;          
                                        (0452) ;    Currently only the page pointer registers listed below are modified: 
                                        (0453) ;          CUR_PP
                                        (0454) ;
                                        (0455)  TRIADC_iGetData3ClearFlag:
                                        (0456) _TRIADC_iGetData3ClearFlag:
                                        (0457)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0458)    RAM_SETPAGE_CUR >TRIADC_bfStatus
075E: 26 11 EF AND   [0x11],0xEF        (0459)    and   [TRIADC_bfStatus], ~TRIADC_fDATA_READY  ; Clear Data ready bit
0761: 58 0F    MOV   X,[0xF]            (0460)    mov   X, [(TRIADC_iResult3 + HighByte)]
0763: 51 10    MOV   A,[0x10]           (0461)    mov   A, [(TRIADC_iResult3 + LowByte)]
                                        (0462)    RAM_EPILOGUE RAM_USE_CLASS_4
0765: 7F       RET                      (0463)    ret
                                        (0464) 
                                        (0465)  TRIADC_iGetData3:
                                        (0466) _TRIADC_iGetData3:
                                        (0467)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0468)    RAM_SETPAGE_CUR >TRIADC_bfStatus
0766: 58 0F    MOV   X,[0xF]            (0469)    mov   X, [(TRIADC_iResult3 + HighByte)]
0768: 51 10    MOV   A,[0x10]           (0470)    mov   A, [(TRIADC_iResult3 + LowByte)]
                                        (0471)    RAM_EPILOGUE RAM_USE_CLASS_4
076A: 7F       RET                      (0472)    ret
                                        (0473) .ENDSECTION
                                        (0474) 
                                        (0475) .SECTION
                                        (0476) ;-----------------------------------------------------------------------------
                                        (0477) ;  FUNCTION NAME: TRIADC_ClearFlag
                                        (0478) ;
                                        (0479) ;  DESCRIPTION:
                                        (0480) ;    Clears the data ready flag.
                                        (0481) ;
                                        (0482) ;-----------------------------------------------------------------------------
                                        (0483) ;
                                        (0484) ;  ARGUMENTS: none
                                        (0485) ;
                                        (0486) ;  RETURNS: none
                                        (0487) ;
                                        (0488) ;  SIDE EFFECTS:
                                        (0489) ;    The A and X registers may be modified by this or future implementations
                                        (0490) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0491) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0492) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0493) ;    functions.
                                        (0494) ;          
                                        (0495) ;    Currently only the page pointer registers listed below are modified: 
                                        (0496) ;          CUR_PP
                                        (0497) ;
                                        (0498)  TRIADC_ClearFlag:
                                        (0499) _TRIADC_ClearFlag:
                                        (0500)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0501)    RAM_SETPAGE_CUR >TRIADC_bfStatus
076B: 26 11 EF AND   [0x11],0xEF        (0502)    and   [TRIADC_bfStatus], ~TRIADC_fDATA_READY  ; Clear Data ready bit
                                        (0503)    RAM_EPILOGUE RAM_USE_CLASS_4
076E: 7F       RET                      (0504)    ret
                                        (0505) .ENDSECTION
                                        (0506) 
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: TRIADC_SetResolution
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;    Sets A/D resolution between 7 and 13 bits.
                                        (0513) ;
                                        (0514) ;-----------------------------------------------------------------------------
                                        (0515) ;
                                        (0516) ;  ARGUMENTS:
                                        (0517) ;   A => passes the number of bits of resolution. ( 7 to 13)
                                        (0518) ;
                                        (0519) ;  RETURNS:
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;          
                                        (0528) ;    Currently only the page pointer registers listed below are modified: 
                                        (0529) ;          CUR_PP
                                        (0530) ;
                                        (0531) ;    This function halts the PWM and the counter to sync the A/D , but
                                        (0532) ;    does not re-enable the counter or PWM. To restart the A/D, "Get_Samples"
                                        (0533) ;    should be called.
                                        (0534) ;
                                        (0535)  TRIADC_SetResolution:
                                        (0536) _TRIADC_SetResolution:
                                        (0537)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0538)    RAM_SETPAGE_CUR >TRIADC_bfStatus
                                        (0539)    
076F: 41 82 FE AND   REG[0x82],0xFE     (0540)    and   reg[TRIADC_bfADC1cr2], ~TRIADC_fRES_SET
                                        (0541) 
0772: 9F 9E    CALL  _TRIADC_StopAD     (0542)    call  TRIADC_StopAD                             ; Stop the A/D if it is running
0774: 55 11 00 MOV   [0x11],0x0         (0543)    mov   [TRIADC_bfStatus], 00h                    ; and clear status and old resolution
                                        (0544) 
                                        (0545)                                                    ; Check for resolution to be within min and max values
0777: 39 07    CMP   A,0x7              (0546)    cmp   A,TRIADC_bMINRES                          ; Check low end of resolution
0779: D0 05    JNC   0x077F             (0547)    jnc   TRIADC_CHECKHI
077B: 50 07    MOV   A,0x7              (0548)    mov   A,TRIADC_bMINRES                          ; Too low - load legal low value
077D: 80 07    JMP   0x0785             (0549)    jmp   TRIADC_RES_OK
                                        (0550) 
                                        (0551) TRIADC_CHECKHI:                                    ; Check high end of resolution
077F: 39 0D    CMP   A,0xD              (0552)    cmp   A,TRIADC_bMAXRES
0781: C0 03    JC    0x0785             (0553)    jc    TRIADC_RES_OK
0783: 50 0D    MOV   A,0xD              (0554)    mov   A,TRIADC_bMAXRES                          ; Too high - load legal Max value
                                        (0555) 
                                        (0556) TRIADC_RES_OK:
                                        (0557)                                                    ; Calculate compare value for the PWM which
                                        (0558)                                                    ; computes the integrate time
0785: 11 07    SUB   A,0x7              (0559)    sub   A, TRIADC_bMINRES                         ; Normalize with min resolution
0787: 2C 11    OR    [0x11],A           (0560)    or    [TRIADC_bfStatus], A
                                        (0561)                                                    ; Since min resolution is 7, 2^^7 = 128, the clock
                                        (0562)                                                    ; is running 4x so 128*4=512 or 0x0200
0789: 01 01    ADD   A,0x1              (0563)    add   A,01h                                     ; The MSB is 02h.
078B: 5C       MOV   X,A                (0564)    mov   X,A
078C: 50 01    MOV   A,0x1              (0565)    mov   A,01h
                                        (0566) 
                                        (0567) TRIADC_CALC_INTTIME:                               ; Now shift the MSB left for every bit of resolution of min (7).
078E: 64       ASL   A                  (0568)    asl   A
078F: 79       DEC   X                  (0569)    dec   X
0790: BF FD    JNZ   0x078E             (0570)    jnz   TRIADC_CALC_INTTIME
                                        (0571) 
                                        (0572) TRIADC_LOAD_INTTIME:                               ; Load compare value and Calc time into registers
                                        (0573)                                                    ; Since minimum resolution is 7 bits, this value will always start at 0
0792: 62 26 00 MOV   REG[0x26],0x0      (0574)    mov   reg[TRIADC_bPWM_IntTime_LSB], 00h
0795: 60 2A    MOV   REG[0x2A],A        (0575)    mov   reg[TRIADC_bPWM_IntTime_MSB], A
                                        (0576) 
                                        (0577)                                                    ; Load the CalcTime into the PWM Period
0797: 62 25 01 MOV   REG[0x25],0x1      (0578)    mov   reg[TRIADC_bPWM_Period_LSB], <wCalcTime
079A: 01 00    ADD   A,0x0              (0579)    add   A, >wCalcTime
079C: 60 29    MOV   REG[0x29],A        (0580)    mov   reg[TRIADC_bPWM_Period_MSB],A
                                        (0581)    RAM_EPILOGUE RAM_USE_CLASS_4
079E: 7F       RET                      (0582)    ret
                                        (0583) .ENDSECTION
                                        (0584) 
                                        (0585) ; End of File TRIADC.asm
FILE: lib\pga_3.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_3.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2012/9/21 at 11:59:15
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_3.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_3_Start
                                        (0060) export _PGA_3_Start
                                        (0061) export  PGA_3_SetPower
                                        (0062) export _PGA_3_SetPower
                                        (0063) 
                                        (0064) export  PGA_3_SetGain
                                        (0065) export _PGA_3_SetGain
                                        (0066) 
                                        (0067) export  PGA_3_Stop
                                        (0068) export _PGA_3_Stop
                                        (0069) 
                                        (0070) IF (PGA_3_AGNDBUFAPI)
                                        (0071) export  PGA_3_EnableAGNDBuffer
                                        (0072) export _PGA_3_EnableAGNDBuffer
                                        (0073) export  PGA_3_DisableAGNDBuffer
                                        (0074) export _PGA_3_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_3_Start
                                        (0092) ;  FUNCTION NAME: PGA_3_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_3_Start:
                                        (0111) _PGA_3_Start:
                                        (0112)  PGA_3_SetPower:
                                        (0113) _PGA_3_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
079F: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
07A1: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
07A2: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
07A3: 5D 7B    MOV   A,REG[0x7B]        (0120)    mov  A, reg[PGA_3_GAIN_CR2]                             ; read power value
07A5: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
07A7: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
07A9: 60 7B    MOV   REG[0x7B],A        (0123)    mov  reg[PGA_3_GAIN_CR2], A                        ; move complete value back to register
07AB: 18       POP   A                  (0124)    pop  A
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
07AC: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_3_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_3_SetGain:
                                        (0154) _PGA_3_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
07AD: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
07AF: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
07B0: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
07B1: 5D 79    MOV   A,REG[0x79]        (0161)    mov  A, reg[PGA_3_GAIN_CR0]                             ; read mux settings
07B3: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
07B5: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
07B8: B0 0A    JNZ   0x07C3             (0164)    jnz  .SETHIGHGAIN
07BA: 41 78 FE AND   REG[0x78],0xFE     (0165)    and  reg[PGA_3_GAIN_CR3],~EXGAIN                        ; Clear High Gain bit.
07BD: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
07BF: 60 79    MOV   REG[0x79],A        (0167)    mov  reg[PGA_3_GAIN_CR0], A                             ; move complete value back to register
07C1: 18       POP   A                  (0168)    pop  A
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
07C2: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
07C3: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
07C6: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
07C8: 60 79    MOV   REG[0x79],A        (0175)    mov  reg[PGA_3_GAIN_CR0], A                             ; move complete value back to register
07CA: 43 78 01 OR    REG[0x78],0x1      (0176)    or   reg[PGA_3_GAIN_CR3], EXGAIN                        ; Set High Gain bit.
07CD: 18       POP   A                  (0177)    pop  A
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
07CE: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_3_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_3_Stop:
                                        (0203) _PGA_3_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
07CF: 41 7B FC AND   REG[0x7B],0xFC     (0206)    and REG[PGA_3_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
07D2: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_3_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_3_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_3_EnableAGNDBuffer:
                                        (0233) _PGA_3_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_3_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_3_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_3_DisableAGNDBuffer:
                                        (0261) _PGA_3_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_3_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_3.asm
FILE: lib\pga_2.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_2.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2012/9/21 at 11:59:15
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_2.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_2_Start
                                        (0060) export _PGA_2_Start
                                        (0061) export  PGA_2_SetPower
                                        (0062) export _PGA_2_SetPower
                                        (0063) 
                                        (0064) export  PGA_2_SetGain
                                        (0065) export _PGA_2_SetGain
                                        (0066) 
                                        (0067) export  PGA_2_Stop
                                        (0068) export _PGA_2_Stop
                                        (0069) 
                                        (0070) IF (PGA_2_AGNDBUFAPI)
                                        (0071) export  PGA_2_EnableAGNDBuffer
                                        (0072) export _PGA_2_EnableAGNDBuffer
                                        (0073) export  PGA_2_DisableAGNDBuffer
                                        (0074) export _PGA_2_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_2_Start
                                        (0092) ;  FUNCTION NAME: PGA_2_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_2_Start:
                                        (0111) _PGA_2_Start:
                                        (0112)  PGA_2_SetPower:
                                        (0113) _PGA_2_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
07D3: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
07D5: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
07D6: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
07D7: 5D 77    MOV   A,REG[0x77]        (0120)    mov  A, reg[PGA_2_GAIN_CR2]                             ; read power value
07D9: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
07DB: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
07DD: 60 77    MOV   REG[0x77],A        (0123)    mov  reg[PGA_2_GAIN_CR2], A                        ; move complete value back to register
07DF: 18       POP   A                  (0124)    pop  A
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
07E0: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_2_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_2_SetGain:
                                        (0154) _PGA_2_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
07E1: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
07E3: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
07E4: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
07E5: 5D 75    MOV   A,REG[0x75]        (0161)    mov  A, reg[PGA_2_GAIN_CR0]                             ; read mux settings
07E7: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
07E9: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
07EC: B0 0A    JNZ   0x07F7             (0164)    jnz  .SETHIGHGAIN
07EE: 41 74 FE AND   REG[0x74],0xFE     (0165)    and  reg[PGA_2_GAIN_CR3],~EXGAIN                        ; Clear High Gain bit.
07F1: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
07F3: 60 75    MOV   REG[0x75],A        (0167)    mov  reg[PGA_2_GAIN_CR0], A                             ; move complete value back to register
07F5: 18       POP   A                  (0168)    pop  A
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
07F6: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
07F7: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
07FA: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
07FC: 60 75    MOV   REG[0x75],A        (0175)    mov  reg[PGA_2_GAIN_CR0], A                             ; move complete value back to register
07FE: 43 74 01 OR    REG[0x74],0x1      (0176)    or   reg[PGA_2_GAIN_CR3], EXGAIN                        ; Set High Gain bit.
0801: 18       POP   A                  (0177)    pop  A
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
0802: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_2_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_2_Stop:
                                        (0203) _PGA_2_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
0803: 41 77 FC AND   REG[0x77],0xFC     (0206)    and REG[PGA_2_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
0806: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_2_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_2_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_2_EnableAGNDBuffer:
                                        (0233) _PGA_2_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_2_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_2_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_2_DisableAGNDBuffer:
                                        (0261) _PGA_2_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_2_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_2.asm
FILE: lib\pga_1.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_1.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2012/9/21 at 11:59:15
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_1.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_1_Start
                                        (0060) export _PGA_1_Start
                                        (0061) export  PGA_1_SetPower
                                        (0062) export _PGA_1_SetPower
                                        (0063) 
                                        (0064) export  PGA_1_SetGain
                                        (0065) export _PGA_1_SetGain
                                        (0066) 
                                        (0067) export  PGA_1_Stop
                                        (0068) export _PGA_1_Stop
                                        (0069) 
                                        (0070) IF (PGA_1_AGNDBUFAPI)
                                        (0071) export  PGA_1_EnableAGNDBuffer
                                        (0072) export _PGA_1_EnableAGNDBuffer
                                        (0073) export  PGA_1_DisableAGNDBuffer
                                        (0074) export _PGA_1_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_1_Start
                                        (0092) ;  FUNCTION NAME: PGA_1_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_1_Start:
                                        (0111) _PGA_1_Start:
                                        (0112)  PGA_1_SetPower:
                                        (0113) _PGA_1_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
0807: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
0809: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
080A: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
080B: 5D 73    MOV   A,REG[0x73]        (0120)    mov  A, reg[PGA_1_GAIN_CR2]                             ; read power value
080D: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
080F: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
0811: 60 73    MOV   REG[0x73],A        (0123)    mov  reg[PGA_1_GAIN_CR2], A                        ; move complete value back to register
0813: 18       POP   A                  (0124)    pop  A
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
0814: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_1_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_1_SetGain:
                                        (0154) _PGA_1_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
0815: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
0817: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
0818: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
0819: 5D 71    MOV   A,REG[0x71]        (0161)    mov  A, reg[PGA_1_GAIN_CR0]                             ; read mux settings
081B: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
081D: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
0820: B0 0A    JNZ   0x082B             (0164)    jnz  .SETHIGHGAIN
0822: 41 70 FE AND   REG[0x70],0xFE     (0165)    and  reg[PGA_1_GAIN_CR3],~EXGAIN                        ; Clear High Gain bit.
0825: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
0827: 60 71    MOV   REG[0x71],A        (0167)    mov  reg[PGA_1_GAIN_CR0], A                             ; move complete value back to register
0829: 18       POP   A                  (0168)    pop  A
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
082A: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
082B: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
082E: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
0830: 60 71    MOV   REG[0x71],A        (0175)    mov  reg[PGA_1_GAIN_CR0], A                             ; move complete value back to register
0832: 43 70 01 OR    REG[0x70],0x1      (0176)    or   reg[PGA_1_GAIN_CR3], EXGAIN                        ; Set High Gain bit.
0835: 18       POP   A                  (0177)    pop  A
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
0836: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_1_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_1_Stop:
                                        (0203) _PGA_1_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
0837: 41 73 FC AND   REG[0x73],0xFC     (0206)    and REG[PGA_1_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
083A: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_1_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_1_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_1_EnableAGNDBuffer:
                                        (0233) _PGA_1_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_1_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_1_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_1_DisableAGNDBuffer:
                                        (0261) _PGA_1_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_1_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_1.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2012/9/21 at 11:59:10
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
083B: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
083C: 10       PUSH  X                  (0209)     push  X
083D: 28       ROMX                     (0210)     romx                               ; Get character from ROM
083E: B0 04    JNZ   0x0843             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
0840: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
0841: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
0842: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
0843: 90 3C    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0218)     call  LCD_WriteData                ; Write data to LCD
0845: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
0846: 18       POP   A                  (0220)     pop   A
0847: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0848: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
084A: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
084B: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
085D: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
085E: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
085F: 67       ASR   A                  (0262)     asr   A
0860: 67       ASR   A                  (0263)     asr   A
0861: 67       ASR   A                  (0264)     asr   A
0862: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
0864: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
0866: 90 19    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0267)     call  LCD_WriteData                ; Write data to screen
0868: 18       POP   A                  (0268)     pop   A                            ; Restore value
0869: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
086B: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
086D: 90 12    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
086F: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
0870: 4B       SWAP  A,X                (0305)     swap  A,X
0871: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
0873: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
0874: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
0876: 7F       RET                      (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
0877: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0879: A0 06    JZ    0x0880             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
087B: 90 04    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0349)     call  LCD_WriteData                ; Write data to screen
087D: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
087E: 8F F8    JMP   _LCD_PrString      (0351)     jmp   .Loop_PrString               ; Go get next character
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
0880: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
0881: 90 5F    CALL  0x08E2             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
0883: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
0884: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
0885: 67       ASR   A                  (0390)     asr   A
0886: 67       ASR   A                  (0391)     asr   A
0887: 67       ASR   A                  (0392)     asr   A
0888: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
088A: 90 38    CALL  0x08C4             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
088C: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
088D: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
088F: 40       NOP                      (0397)     nop
0890: 40       NOP                      (0398)     nop
0891: 40       NOP                      (0399)     nop
0892: 90 30    CALL  0x08C4             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
0894: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
0895: 90 4B    CALL  0x08E2             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
0897: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0898: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0899: 67       ASR   A                  (0436)     asr   A
089A: 67       ASR   A                  (0437)     asr   A
089B: 67       ASR   A                  (0438)     asr   A
089C: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
089E: 90 09    CALL  0x08A9             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
08A0: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
08A1: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
08A3: 40       NOP                      (0443)     nop
08A4: 40       NOP                      (0444)     nop
08A5: 40       NOP                      (0445)     nop
08A6: 90 01    CALL  0x08A9             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
08A8: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
08A9: 08       PUSH  A                  (0477)     push  A
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
08AA: 26 13 80 AND   [0x13],0x80        (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
08AD: 51 13    MOV   A,[0x13]           (0480)     mov   A,[Port_2_Data_SHADE]
08AF: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
08B1: 18       POP   A                  (0483)     pop   A
08B2: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
08B4: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
08B6: 2A 13    OR    A,[0x13]           (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
08B8: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
08BA: 53 13    MOV   [0x13],A           (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
08BC: 40       NOP                      (0489)     nop
08BD: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
08BF: 53 13    MOV   [0x13],A           (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
08C1: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
08C3: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
08C4: 08       PUSH  A                  (0523)     push  A
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
08C5: 26 13 80 AND   [0x13],0x80        (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
08C8: 2E 13 20 OR    [0x13],0x20        (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
08CB: 51 13    MOV   A,[0x13]           (0527)     mov   A,[Port_2_Data_SHADE]
08CD: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
08CF: 18       POP   A                  (0530)     pop   A
08D0: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
08D2: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
08D4: 2A 13    OR    A,[0x13]           (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
08D6: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
08D8: 53 13    MOV   [0x13],A           (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
08DA: 40       NOP                      (0536)     NOP
08DB: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
08DD: 53 13    MOV   [0x13],A           (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
08DF: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
08E1: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
08E2: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
08E3: 26 13 80 AND   [0x13],0x80        (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
08E6: 51 13    MOV   A,[0x13]           (0574)     mov   A,[Port_2_Data_SHADE]
08E8: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
08EA: 26 14 F0 AND   [0x14],0xF0        (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
08ED: 51 14    MOV   A,[0x14]           (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
08EF: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
08F1: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
08F3: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
08F5: 2E 13 40 OR    [0x13],0x40        (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
08F8: 51 13    MOV   A,[0x13]           (0584)     mov   A,[Port_2_Data_SHADE]
08FA: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
08FC: 40       NOP                      (0586)     NOP
                                        (0587) 
08FD: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
08FE: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0900: 2E 13 50 OR    [0x13],0x50        (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
0903: 51 13    MOV   A,[0x13]           (0593)     mov   A,[Port_2_Data_SHADE]
0905: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
0907: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
0908: 40       NOP                      (0597)     nop
0909: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
090B: 08       PUSH  A                  (0610)     push  A
090C: 26 13 C0 AND   [0x13],0xC0        (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
090F: 51 13    MOV   A,[0x13]           (0612)     mov   A,[Port_2_Data_SHADE]
0911: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
0913: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
0914: 40       NOP                      (0616)     nop                                    ; fastest PSoC
0915: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
0916: 2E 13 50 OR    [0x13],0x50        (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
0919: 51 13    MOV   A,[0x13]           (0620)     mov   A,[Port_2_Data_SHADE]
091B: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
091D: 40       NOP                      (0623)     nop
091E: 40       NOP                      (0624)     nop
                                        (0625) 
091F: 26 13 C0 AND   [0x13],0xC0        (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0922: 51 13    MOV   A,[0x13]           (0627)     mov   A,[Port_2_Data_SHADE]
0924: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
0926: 18       POP   A                  (0630)     pop   A
0927: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
0929: A0 04    JZ    0x092E             (0633)     jz    .UNLOCK
092B: 79       DEC   X                  (0634)     dec   X
092C: BF D3    JNZ   0x0900             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
092E: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
092F: 2E 14 7F OR    [0x14],0x7F        (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
0932: 51 14    MOV   A,[0x14]           (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
0934: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
0936: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
0938: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
093A: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
093B: 7F       RET                      (0646)     ret
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
093C: 26 14 80 AND   [0x14],0x80        (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
093F: 2E 14 7F OR    [0x14],0x7F        (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
0942: 26 15 80 AND   [0x15],0x80        (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
0945: 51 14    MOV   A,[0x14]           (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
0947: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
0949: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
094B: 51 15    MOV   A,[0x15]           (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
094D: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
094F: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
0951: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0953: 90 63    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
0955: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0957: 90 5F    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
0959: 50 03    MOV   A,0x3              (0701)     mov   A,03h
095B: 9F 4C    CALL  0x08A9             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
095D: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
095F: 90 57    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
0961: 50 03    MOV   A,0x3              (0707)     mov   A,03h
0963: 9F 44    CALL  0x08A9             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
0965: 90 5F    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
0967: 90 5D    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
0969: 90 5B    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
096B: 50 03    MOV   A,0x3              (0714)     mov   A,03h
096D: 9F 3A    CALL  0x08A9             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
096F: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0971: 90 45    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
0973: 50 02    MOV   A,0x2              (0720)     mov   A,02h
0975: 9F 32    CALL  0x08A9             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
0977: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0979: 90 3D    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
097B: 50 08    MOV   A,0x8              (0726)     mov   A,08h
097D: 9F 16    CALL  _LCD_Control       (0727)     call  LCD_Control
097F: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0981: 90 35    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
0983: 50 01    MOV   A,0x1              (0731)     mov   A,01h
0985: 9F 0E    CALL  _LCD_Control       (0732)     call  LCD_Control
0987: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0989: 90 2D    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
098B: 50 06    MOV   A,0x6              (0736)     mov   A,06h
098D: 9F 06    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
098F: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
0991: 9F 02    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
0993: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
0995: 9E FE    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
0997: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
0999: 9E FA    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
099B: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
099D: 9E F6    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
099F: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
09A1: 9E F2    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
09A3: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
09A5: 90 11    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
09A7: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
09AC: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
09AE: 10       PUSH  X                  (0791)     push  X                            ; Store COL
09AF: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
09B1: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
09B2: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
09B4: 20       POP   X                  (0795)     pop   X
                                        (0796) 
09B5: 9E DE    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
09B7: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
09B8: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
09BA: 78       DEC   A                  (0828)     dec   A
09BB: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
09BD: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
09C6: 08       PUSH  A                  (0871)     push  A
09C7: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
09C9: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
09CB: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
09CD: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
09CF: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
09D1: D0 06    JNC   0x09D8             (0877)     jnc   .Delay50u_End
09D3: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
09D5: 78       DEC   A                  (0880)     dec   A                              ; [4]
09D6: BF FE    JNZ   0x09D5             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
09D8: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
09D9: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
09DA: 10       PUSH  X                  (0943)     push  X
09DB: 59 00    MOV   X,[X+0]            (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
09DD: 9F CD    CALL  _LCD_Position      (0945)     call  LCD_Position                 ; Set cursor position
09DF: 20       POP   X                  (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
09E0: 3D FE 00 CMP   [X-2],0x0          (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
09E3: B0 05    JNZ   0x09E9             (0950)     jnz   .LCD_CHECK1X
09E5: 50 00    MOV   A,0x0              (0951)     mov   A,00h                         ; Load empty character
09E7: 80 11    JMP   0x09F9             (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
09E9: 3D FE 06 CMP   [X-2],0x6          (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
09EC: D0 07    JNC   0x09F4             (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
09EE: 52 FE    MOV   A,[X-2]            (0957)     mov   A,[X+BG_LENGTHX]
09F0: 15 FE    SUB   [X-2],A            (0958)     sub   [X+BG_LENGTHX],A
09F2: 80 06    JMP   0x09F9             (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
09F4: 50 06    MOV   A,0x6              (0962)     mov   A, 06h
09F6: 17 FE 05 SUB   [X-2],0x5          (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
09F9: 9E 86    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
09FB: 7B FF    DEC   [X-1]              (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
09FD: BF E2    JNZ   0x09E0             (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
09FF: 7F       RET                      (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
0A00: 4F       MOV   X,SP               (1015)     mov   X, SP
0A01: 10       PUSH  X                  (1016)     push  X
0A02: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
0A04: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
0A06: 9F A4    CALL  _LCD_Position      (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
0A08: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
0A09: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
0A0C: B0 05    JNZ   0x0A12             (1026)     jnz   .LCD_CHECK1
0A0E: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
0A10: 80 11    JMP   0x0A22             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
0A12: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
0A15: D0 07    JNC   0x0A1D             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
0A17: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
0A19: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
0A1B: 80 06    JMP   0x0A22             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
0A1D: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
0A1F: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
0A22: 9E 5D    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
0A24: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
0A26: BF E2    JNZ   0x0A09             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
0A28: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
0A29: 21 03    AND   A,0x3              (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
0A2B: 08       PUSH  A                  (1098)     push  A
0A2C: FF 7A    INDEX LCD_ROW_OFFSET     (1099)     index LCD_ROW_OFFSET  ; Get row offset
0A2E: 03 00    ADD   A,[X+0]            (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
0A30: 9E 63    CALL  _LCD_Control       (1101)     call  LCD_Control                  ; Position Cursor
0A32: 3D FE 00 CMP   [X-2],0x0          (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
0A35: B0 05    JNZ   0x0A3B             (1103)     jnz   .VBG_NZ_SEGX
0A37: 50 20    MOV   A,0x20             (1104)     mov   A,' '                        ; Load space character
0A39: 80 13    JMP   0x0A4D             (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
0A3B: 3D FE 09 CMP   [X-2],0x9          (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
0A3E: D0 09    JNC   0x0A48             (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
0A40: 52 FE    MOV   A,[X-2]            (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
0A42: 78       DEC   A                  (1111)     dec   A
0A43: 56 FE 00 MOV   [X-2],0x0          (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
0A46: 80 06    JMP   0x0A4D             (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
0A48: 17 FE 08 SUB   [X-2],0x8          (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
0A4B: 50 07    MOV   A,0x7              (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
0A4D: 9E 32    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(1120)     call  LCD_WriteData                ; Write value
0A4F: 18       POP   A                  (1121)     pop   A
0A50: 78       DEC   A                  (1122)     dec   A
0A51: 7B FF    DEC   [X-1]              (1123)     dec   [X+VBG_CHAR_HEIGHTX]
0A53: BF D7    JNZ   0x0A2B             (1124)     jnz   .VBG_LOOPX
0A55: 7F       RET                      (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
0A56: 4F       MOV   X,SP               (1168)     mov   X, SP
0A57: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
0A59: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
0A5B: 08       PUSH  A                  (1172)     push  A
0A5C: FF 4A    INDEX LCD_ROW_OFFSET     (1173)     index LCD_ROW_OFFSET  ; Get row offset
0A5E: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
0A60: 9E 33    CALL  _LCD_Control       (1175)     call  LCD_Control                  ; Position Cursor
0A62: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
0A65: B0 05    JNZ   0x0A6B             (1177)     jnz   .VBG_NZ_SEG
0A67: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
0A69: 80 13    JMP   0x0A7D             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
0A6B: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
0A6E: D0 09    JNC   0x0A78             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
0A70: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
0A72: 78       DEC   A                  (1185)     dec   A
0A73: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
0A76: 80 06    JMP   0x0A7D             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
0A78: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
0A7B: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
0A7D: 9E 02    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(1194)     call  LCD_WriteData                ; Write value
0A7F: 18       POP   A                  (1195)     pop   A
0A80: 78       DEC   A                  (1196)     dec   A
0A81: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
0A83: BF D7    JNZ   0x0A5B             (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
0A85: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
0A86: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
0A87: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
0A88: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
0A89: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
0A8B: 9E 08    CALL  _LCD_Control       (1243)     call  LCD_Control                  ; Position the CG pointer
0A8D: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
0A90: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
0A93: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
0A95: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
0A97: D0 05    JNC   0x0A9D             (1251)     jnc   .VBG_SOLID
0A99: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
0A9B: 80 03    JMP   0x0A9F             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
0A9D: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
0A9F: 9D E0    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(1257)     call  LCD_WriteData                ; character data
0AA1: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
0AA3: BF EF    JNZ   0x0A93             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
0AA5: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
0AA7: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
0AAA: BF E5    JNZ   0x0A90             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
0AAC: 18       POP   A                  (1264)     pop  A
0AAD: 18       POP   A                  (1265)     pop  A
0AAE: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
0AB0: 9D E3    CALL  _LCD_Control       (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
0AB2: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
0AC1: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
0AC2: 38 03    ADD   SP,0x3             (1320)     add   SP,3
0AC4: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
0AC6: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
0AC8: 9D CB    CALL  _LCD_Control       (1324)     call  LCD_Control                  ; Position the CG pointer
0ACA: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
0ACD: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
0AD0: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
0AD2: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
0AD5: B0 05    JNZ   0x0ADB             (1332)     jnz   .BG_OTHER
0AD7: FF DA    INDEX LCD_BG_TYPE1       (1333)     index LCD_BG_TYPE1
0AD9: 80 03    JMP   0x0ADD             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
0ADB: FF DD    INDEX LCD_BG_TYPE2       (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
0ADD: 9D A2    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(1338)     call  LCD_WriteData
0ADF: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
0AE1: BF EE    JNZ   0x0AD0             (1340)     jnz   .BG_Loop2
0AE3: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
0AE5: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
0AE8: BF E4    JNZ   0x0ACD             (1343)     jnz   .BG_Loop1
                                        (1344) 
0AEA: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
0AEC: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_DISP_ON
0AEE: 9D A5    CALL  _LCD_Control       (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
0AF0: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\counter8int.asm               (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Counter8INT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2012/9/21 at 11:58:4
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Counter8.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Counter8_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Counter8_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Counter8_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0AF1: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file Counter8INT.asm
FILE: lib\counter8.asm                  (0001) ;;*****************************************************************************
0AF2: 43 E1 20 OR    REG[0xE1],0x20     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Counter8.asm
                                        (0004) ;;   Version: 2.60, Updated on 2012/9/21 at 11:58:4
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Counter8.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Counter8_EnableInt
                                        (0030) export _Counter8_EnableInt
                                        (0031) export  Counter8_DisableInt
                                        (0032) export _Counter8_DisableInt
                                        (0033) export  Counter8_Start
                                        (0034) export _Counter8_Start
                                        (0035) export  Counter8_Stop
                                        (0036) export _Counter8_Stop
                                        (0037) export  Counter8_WritePeriod
                                        (0038) export _Counter8_WritePeriod
                                        (0039) export  Counter8_WriteCompareValue
                                        (0040) export _Counter8_WriteCompareValue
                                        (0041) export  Counter8_bReadCompareValue
                                        (0042) export _Counter8_bReadCompareValue
                                        (0043) export  Counter8_bReadCounter
                                        (0044) export _Counter8_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bCounter8_ReadCompareValue  ; deprecated
                                        (0049) export _bCounter8_ReadCompareValue  ; deprecated
                                        (0050) export  bCounter8_ReadCounter       ; deprecated
                                        (0051) export _bCounter8_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ;  Constant Definitions
                                        (0055) ;-----------------------------------------------
                                        (0056) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0057) 
                                        (0058) 
                                        (0059) AREA UserModules (ROM, REL)
                                        (0060) 
                                        (0061) .SECTION
                                        (0062) ;-----------------------------------------------------------------------------
                                        (0063) ;  FUNCTION NAME: Counter8_EnableInt
                                        (0064) ;
                                        (0065) ;  DESCRIPTION:
                                        (0066) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                        (0067) ;     associated with this User Module. This function has no effect until and
                                        (0068) ;     unless the global interrupts are enabled (for example by using the
                                        (0069) ;     macro M8C_EnableGInt).
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:    None.
                                        (0073) ;  RETURNS:      Nothing.
                                        (0074) ;  SIDE EFFECTS: 
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  Counter8_EnableInt:
                                        (0082) _Counter8_EnableInt:
                                        (0083)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0084)    Counter8_EnableInt_M
                                        (0085)    RAM_EPILOGUE RAM_USE_CLASS_1
0AF5: 7F       RET                      (0086)    ret
0AF6: 41 E1 DF AND   REG[0xE1],0xDF     
                                        (0087) 
                                        (0088) .ENDSECTION
                                        (0089) 
                                        (0090) .SECTION
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;  FUNCTION NAME: Counter8_DisableInt
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;     Disables this counter's interrupt by clearing the interrupt enable
                                        (0096) ;     mask bit associated with this User Module.
                                        (0097) ;-----------------------------------------------------------------------------
                                        (0098) ;
                                        (0099) ;  ARGUMENTS:    None
                                        (0100) ;  RETURNS:      Nothing
                                        (0101) ;  SIDE EFFECTS: 
                                        (0102) ;    The A and X registers may be modified by this or future implementations
                                        (0103) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0104) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0105) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0106) ;    functions.
                                        (0107) ;
                                        (0108)  Counter8_DisableInt:
                                        (0109) _Counter8_DisableInt:
                                        (0110)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0111)    Counter8_DisableInt_M
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_1
0AF9: 7F       RET                      (0113)    ret
0AFA: 43 37 01 OR    REG[0x37],0x1      
                                        (0114) 
                                        (0115) 
                                        (0116) .ENDSECTION
                                        (0117) 
                                        (0118) .SECTION
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) ;  FUNCTION NAME: Counter8_Start
                                        (0121) ;
                                        (0122) ;  DESCRIPTION:
                                        (0123) ;     Sets the start bit in the Control register of this user module.  The
                                        (0124) ;     counter will begin counting on the next input clock as soon as the
                                        (0125) ;     enable input is asserted high.
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;
                                        (0128) ;  ARGUMENTS:    None
                                        (0129) ;  RETURNS:      Nothing
                                        (0130) ;  SIDE EFFECTS: 
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  Counter8_Start:
                                        (0138) _Counter8_Start:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0140)    Counter8_Start_M
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
0AFD: 7F       RET                      (0142)    ret
0AFE: 41 37 FE AND   REG[0x37],0xFE     
                                        (0143) 
                                        (0144) 
                                        (0145) .ENDSECTION
                                        (0146) 
                                        (0147) .SECTION
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;  FUNCTION NAME: Counter8_Stop
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;     Disables counter operation by clearing the start bit in the Control
                                        (0153) ;     register.
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:    None
                                        (0157) ;  RETURNS:      Nothing
                                        (0158) ;  SIDE EFFECTS: 
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;
                                        (0165)  Counter8_Stop:
                                        (0166) _Counter8_Stop:
                                        (0167)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0168)    Counter8_Stop_M
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_1
0B01: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) 
                                        (0173) .ENDSECTION
                                        (0174) 
                                        (0175) .SECTION
                                        (0176) ;-----------------------------------------------------------------------------
                                        (0177) ;  FUNCTION NAME: Counter8_WritePeriod
                                        (0178) ;
                                        (0179) ;  DESCRIPTION:
                                        (0180) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0184) ;  RETURNS:   Nothing
                                        (0185) ;  SIDE EFFECTS:
                                        (0186) ;    If the counter user module is stopped, then this value will also be
                                        (0187) ;    latched into the Count register (DR0).
                                        (0188) ;     
                                        (0189) ;    The A and X registers may be modified by this or future implementations
                                        (0190) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0191) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0192) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0193) ;    functions.
                                        (0194) ;
                                        (0195)  Counter8_WritePeriod:
                                        (0196) _Counter8_WritePeriod:
                                        (0197)    RAM_PROLOGUE RAM_USE_CLASS_1
0B02: 60 35    MOV   REG[0x35],A        (0198)    mov   reg[Counter8_PERIOD_REG], A
                                        (0199)    RAM_EPILOGUE RAM_USE_CLASS_1
0B04: 7F       RET                      (0200)    ret
                                        (0201) 
                                        (0202) 
                                        (0203) .ENDSECTION
                                        (0204) 
                                        (0205) .SECTION
                                        (0206) ;-----------------------------------------------------------------------------
                                        (0207) ;  FUNCTION NAME: Counter8_WriteCompareValue
                                        (0208) ;
                                        (0209) ;  DESCRIPTION:
                                        (0210) ;     Writes compare value into the Compare register (DR2).
                                        (0211) ;-----------------------------------------------------------------------------
                                        (0212) ;
                                        (0213) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0214) ;  RETURNS:      Nothing
                                        (0215) ;  SIDE EFFECTS: 
                                        (0216) ;    The A and X registers may be modified by this or future implementations
                                        (0217) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0218) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0219) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0220) ;    functions.
                                        (0221) ;
                                        (0222)  Counter8_WriteCompareValue:
                                        (0223) _Counter8_WriteCompareValue:
                                        (0224)    RAM_PROLOGUE RAM_USE_CLASS_1
0B05: 60 36    MOV   REG[0x36],A        (0225)    mov   reg[Counter8_COMPARE_REG], A
                                        (0226)    RAM_EPILOGUE RAM_USE_CLASS_1
0B07: 7F       RET                      (0227)    ret
                                        (0228) 
                                        (0229) 
                                        (0230) .ENDSECTION
                                        (0231) 
                                        (0232) .SECTION
                                        (0233) ;-----------------------------------------------------------------------------
                                        (0234) ;  FUNCTION NAME: Counter8_bReadCompareValue
                                        (0235) ;
                                        (0236) ;  DESCRIPTION:
                                        (0237) ;     Reads the Compare register.
                                        (0238) ;-----------------------------------------------------------------------------
                                        (0239) ;
                                        (0240) ;  ARGUMENTS:    None
                                        (0241) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0242) ;  SIDE EFFECTS: 
                                        (0243) ;    The A and X registers may be modified by this or future implementations
                                        (0244) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0245) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0246) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0247) ;    functions.
                                        (0248) ;
                                        (0249)  Counter8_bReadCompareValue:
                                        (0250) _Counter8_bReadCompareValue:
                                        (0251)  bCounter8_ReadCompareValue:                     ; this name deprecated
                                        (0252) _bCounter8_ReadCompareValue:                     ; this name deprecated
                                        (0253)    RAM_PROLOGUE RAM_USE_CLASS_1
0B08: 5D 36    MOV   A,REG[0x36]        (0254)    mov   A, reg[Counter8_COMPARE_REG]
                                        (0255)    RAM_EPILOGUE RAM_USE_CLASS_1
0B0A: 7F       RET                      (0256)    ret
                                        (0257) 
                                        (0258) 
                                        (0259) .ENDSECTION
                                        (0260) 
                                        (0261) .SECTION
                                        (0262) ;-----------------------------------------------------------------------------
                                        (0263) ;  FUNCTION NAME: Counter8_bReadCounter
                                        (0264) ;
                                        (0265) ;  DESCRIPTION:
                                        (0266) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0267) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0268) ;     from the Count to the Compare registers by holding the clock low in
                                        (0269) ;     the PSoC block.
                                        (0270) ;-----------------------------------------------------------------------------
                                        (0271) ;
                                        (0272) ;  ARGUMENTS: None
                                        (0273) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0274) ;  SIDE EFFECTS:
                                        (0275) ;     1) If running, the user module is stopped momentarily and one or more
                                        (0276) ;        counts may be missed.
                                        (0277) ;     2) The A and X registers may be modified by this or future implementations
                                        (0278) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0279) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0280) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0281) ;        functions.
                                        (0282) ;
                                        (0283)  Counter8_bReadCounter:
                                        (0284) _Counter8_bReadCounter:
                                        (0285)  bCounter8_ReadCounter:                          ; this name deprecated
                                        (0286) _bCounter8_ReadCounter:                          ; this name deprecated
                                        (0287) 
                                        (0288)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0289)    bOrigControlReg:        EQU   1               ; Frame offset to temp CR0     store
                                        (0290)    bOrigClockSetting:      EQU   2               ; Frame offset to temp Input   store
                                        (0291)    wCounter:               EQU   3               ; Frame offset to temp Count   store
                                        (0292)    STACK_FRAME_SIZE:       EQU   4               ; max stack frame size is 4 bytes
                                        (0293) 
                                        (0294)    RAM_PROLOGUE RAM_USE_CLASS_2
0B0B: 4F       MOV   X,SP               (0295)    mov   X, SP                                   ; X <- stack frame pointer
0B0C: 5D 36    MOV   A,REG[0x36]        (0296)    mov   A, reg[Counter8_COMPARE_REG]            ; Save the Compare register on the stack
0B0E: 08       PUSH  A                  (0297)    push  A                                       ;
0B0F: 5D 37    MOV   A,REG[0x37]        (0298)    mov   A, reg[Counter8_CONTROL_REG]            ; Save CR0 (running or stopped state)
0B11: 08       PUSH  A                  (0299)    push  A                                       ;
0B12: 41 37 FE AND   REG[0x37],0xFE     
0B15: 71 10    OR    F,0x10             
                                        (0300)    Counter8_Stop_M                               ; Disable (stop) the Counter if running
                                        (0301)    M8C_SetBank1                                  ;
0B17: 5D 35    MOV   A,REG[0x35]        (0302)    mov   A, reg[Counter8_INPUT_REG]              ; save the clock input setting
0B19: 08       PUSH  A                  (0303)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0304)                                                  ;   hold the clock low:
0B1A: 62 35 00 MOV   REG[0x35],0x0      (0305)    mov   reg[Counter8_INPUT_REG], INPUT_REG_NULL
0B1D: 70 EF    AND   F,0xEF             
                                        (0306)    M8C_SetBank0
                                        (0307)                                                  ; Extract the Count via DR2 register
0B1F: 5D 34    MOV   A,REG[0x34]        (0308)    mov   A, reg[Counter8_COUNTER_REG]            ; DR2 <- DR0
0B21: 5D 36    MOV   A,REG[0x36]        (0309)    mov   A, reg[Counter8_COMPARE_REG]            ; Stash the Count on the stack
0B23: 08       PUSH  A                  (0310)    push  A                                       ;  -stack frame is now 3 bytes
0B24: 52 00    MOV   A,[X+0]            (0311)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
0B26: 60 36    MOV   REG[0x36],A        (0312)    mov   reg[Counter8_COMPARE_REG], A
0B28: 71 10    OR    F,0x10             
                                        (0313)    M8C_SetBank1                                  ; Restore the counter operation:
0B2A: 52 02    MOV   A,[X+2]            (0314)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0B2C: 60 35    MOV   REG[0x35],A        (0315)    mov   reg[Counter8_INPUT_REG], A              ;
0B2E: 70 EF    AND   F,0xEF             
                                        (0316)    M8C_SetBank0                                  ;   then re-enable (start) the counter
0B30: 52 01    MOV   A,[X+1]            (0317)    mov   A, [X+bOrigControlReg]                  ;     if it was running when
0B32: 60 37    MOV   REG[0x37],A        (0318)    mov   reg[Counter8_CONTROL_REG], A            ;     this function was first called
0B34: 18       POP   A                  (0319)    pop   A                                       ; Setup the return value
0B35: 38 FD    ADD   SP,0xFD            (0320)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
                                        (0321)    RAM_EPILOGUE RAM_USE_CLASS_2
0B37: 7F       RET                      (0322)    ret
                                        (0323) 
                                        (0324) .ENDSECTION
                                        (0325) 
                                        (0326) ; End of File Counter8.asm
FILE: C:\MEIJI_~1\CONTRO~1\CONTRO~1\main.c
(0001) #include <m8c.h>
(0002) #include "PSoCAPI.h"
(0003) #include <stdlib.h>
(0004) 
(0005) 
(0006) void putData(int iResult1, int iResult2, int iResult3)
(0007) {
__UserModules_end|_putData|__text_start|_putData:
  pszData              --> X+0
  iResult3             --> X-9
  iResult2             --> X-7
  iResult1             --> X-5
    0B38: 10       PUSH  X
    0B39: 4F       MOV   X,SP
    0B3A: 38 07    ADD   SP,0x7
(0008) char pszData[7];
(0009)   
(0010)   LCD_Position(0, 0);
    0B3C: 10       PUSH  X
    0B3D: 50 00    MOV   A,0x0
    0B3F: 57 00    MOV   X,0x0
    0B41: 7C 09 AC LCALL _LCD_Position
(0011)   LCD_PrCString("X:");
    0B44: 50 01    MOV   A,0x1
    0B46: 08       PUSH  A
    0B47: 50 5B    MOV   A,0x5B
    0B49: 5C       MOV   X,A
    0B4A: 18       POP   A
    0B4B: 7C 08 3B LCALL _LCD_PrCString
    0B4E: 20       POP   X
(0012)   itoa(pszData, iResult1 / 10, 10);
    0B4F: 50 00    MOV   A,0x0
    0B51: 08       PUSH  A
    0B52: 50 0A    MOV   A,0xA
    0B54: 08       PUSH  A
    0B55: 50 00    MOV   A,0x0
    0B57: 08       PUSH  A
    0B58: 50 0A    MOV   A,0xA
    0B5A: 08       PUSH  A
    0B5B: 52 FB    MOV   A,[X-5]
    0B5D: 08       PUSH  A
    0B5E: 52 FC    MOV   A,[X-4]
    0B60: 08       PUSH  A
    0B61: 7C 0C C2 LCALL 0x0CC2
    0B64: 18       POP   A
    0B65: 53 04    MOV   [__r1],A
    0B67: 18       POP   A
    0B68: 53 05    MOV   [__r0],A
    0B6A: 38 FE    ADD   SP,0xFE
    0B6C: 08       PUSH  A
    0B6D: 51 04    MOV   A,[__r1]
    0B6F: 08       PUSH  A
    0B70: 51 05    MOV   A,[__r0]
    0B72: 08       PUSH  A
    0B73: 10       PUSH  X
    0B74: 7C 0D 43 LCALL _itoa
    0B77: 38 FA    ADD   SP,0xFA
(0013)   LCD_PrString(pszData);
    0B79: 10       PUSH  X
    0B7A: 51 05    MOV   A,[__r0]
    0B7C: 7C 08 77 LCALL _LCD_PrString
    0B7F: 20       POP   X
(0014)   
(0015)   UART_PutString(pszData);
    0B80: 10       PUSH  X
    0B81: 51 05    MOV   A,[__r0]
    0B83: 7C 04 8A LCALL _UART_PutString
(0016)   UART_CPutString(",");
    0B86: 50 01    MOV   A,0x1
    0B88: 08       PUSH  A
    0B89: 50 59    MOV   A,0x59
    0B8B: 5C       MOV   X,A
    0B8C: 18       POP   A
    0B8D: 7C 04 D4 LCALL _UART_CPutString
(0017)   
(0018)   LCD_PrCString("Z:");
    0B90: 50 01    MOV   A,0x1
    0B92: 08       PUSH  A
    0B93: 50 56    MOV   A,0x56
    0B95: 5C       MOV   X,A
    0B96: 18       POP   A
    0B97: 7C 08 3B LCALL _LCD_PrCString
    0B9A: 20       POP   X
(0019)   itoa(pszData, iResult2 / 10, 10);
    0B9B: 50 00    MOV   A,0x0
    0B9D: 08       PUSH  A
    0B9E: 50 0A    MOV   A,0xA
    0BA0: 08       PUSH  A
    0BA1: 50 00    MOV   A,0x0
    0BA3: 08       PUSH  A
    0BA4: 50 0A    MOV   A,0xA
    0BA6: 08       PUSH  A
    0BA7: 52 F9    MOV   A,[X-7]
    0BA9: 08       PUSH  A
    0BAA: 52 FA    MOV   A,[X-6]
    0BAC: 08       PUSH  A
    0BAD: 7C 0C C2 LCALL 0x0CC2
    0BB0: 18       POP   A
    0BB1: 53 04    MOV   [__r1],A
    0BB3: 18       POP   A
    0BB4: 53 05    MOV   [__r0],A
    0BB6: 38 FE    ADD   SP,0xFE
    0BB8: 08       PUSH  A
    0BB9: 51 04    MOV   A,[__r1]
    0BBB: 08       PUSH  A
    0BBC: 51 05    MOV   A,[__r0]
    0BBE: 08       PUSH  A
    0BBF: 10       PUSH  X
    0BC0: 7C 0D 43 LCALL _itoa
    0BC3: 38 FA    ADD   SP,0xFA
(0020)   LCD_PrString(pszData);
    0BC5: 10       PUSH  X
    0BC6: 51 05    MOV   A,[__r0]
    0BC8: 7C 08 77 LCALL _LCD_PrString
    0BCB: 20       POP   X
(0021)   
(0022)   UART_PutString(pszData);
    0BCC: 10       PUSH  X
    0BCD: 51 05    MOV   A,[__r0]
    0BCF: 7C 04 8A LCALL _UART_PutString
(0023)   UART_CPutString(",");
    0BD2: 50 01    MOV   A,0x1
    0BD4: 08       PUSH  A
    0BD5: 50 59    MOV   A,0x59
    0BD7: 5C       MOV   X,A
    0BD8: 18       POP   A
    0BD9: 7C 04 D4 LCALL _UART_CPutString
(0024)   
(0025)   LCD_Position(1, 0);
    0BDC: 57 00    MOV   X,0x0
    0BDE: 50 01    MOV   A,0x1
    0BE0: 7C 09 AC LCALL _LCD_Position
(0026)   LCD_PrCString("Y:");
    0BE3: 50 01    MOV   A,0x1
    0BE5: 08       PUSH  A
    0BE6: 50 53    MOV   A,0x53
    0BE8: 5C       MOV   X,A
    0BE9: 18       POP   A
    0BEA: 7C 08 3B LCALL _LCD_PrCString
    0BED: 20       POP   X
(0027)   itoa(pszData, iResult3 / 10, 10);
    0BEE: 50 00    MOV   A,0x0
    0BF0: 08       PUSH  A
    0BF1: 50 0A    MOV   A,0xA
    0BF3: 08       PUSH  A
    0BF4: 50 00    MOV   A,0x0
    0BF6: 08       PUSH  A
    0BF7: 50 0A    MOV   A,0xA
    0BF9: 08       PUSH  A
    0BFA: 52 F7    MOV   A,[X-9]
    0BFC: 08       PUSH  A
    0BFD: 52 F8    MOV   A,[X-8]
    0BFF: 08       PUSH  A
    0C00: 7C 0C C2 LCALL 0x0CC2
    0C03: 18       POP   A
    0C04: 53 04    MOV   [__r1],A
    0C06: 18       POP   A
    0C07: 53 05    MOV   [__r0],A
    0C09: 38 FE    ADD   SP,0xFE
    0C0B: 08       PUSH  A
    0C0C: 51 04    MOV   A,[__r1]
    0C0E: 08       PUSH  A
    0C0F: 51 05    MOV   A,[__r0]
    0C11: 08       PUSH  A
    0C12: 10       PUSH  X
    0C13: 7C 0D 43 LCALL _itoa
    0C16: 38 FA    ADD   SP,0xFA
(0028)   LCD_PrString(pszData);
    0C18: 10       PUSH  X
    0C19: 51 05    MOV   A,[__r0]
    0C1B: 7C 08 77 LCALL _LCD_PrString
    0C1E: 20       POP   X
(0029)   
(0030)   UART_PutString(pszData);
    0C1F: 10       PUSH  X
    0C20: 51 05    MOV   A,[__r0]
    0C22: 7C 04 8A LCALL _UART_PutString
(0031)   UART_CPutString("\r\n");
    0C25: 50 01    MOV   A,0x1
    0C27: 08       PUSH  A
    0C28: 50 50    MOV   A,0x50
    0C2A: 5C       MOV   X,A
    0C2B: 18       POP   A
    0C2C: 7C 04 D4 LCALL _UART_CPutString
    0C2F: 20       POP   X
    0C30: 38 F9    ADD   SP,0xF9
    0C32: 20       POP   X
    0C33: 7F       RET   
(0032) }
(0033) 
(0034) void main(void)
(0035) {
_main:
    0C34: 10       PUSH  X
    0C35: 4F       MOV   X,SP
    0C36: 38 04    ADD   SP,0x4
(0036) M8C_EnableGInt;
    0C38: 71 01    OR    F,0x1
(0037)   
(0038)   UART_CmdReset();
    0C3A: 10       PUSH  X
    0C3B: 7C 04 EF LCALL _UART_CmdReset
(0039)   UART_IntCntl(UART_ENABLE_RX_INT);
    0C3E: 50 01    MOV   A,0x1
    0C40: 7C 04 08 LCALL _UART_IntCntl
(0040)   Counter8_WritePeriod(155);
    0C43: 50 9B    MOV   A,0x9B
    0C45: 7C 0B 02 LCALL _Counter8_WritePeriod
(0041)   Counter8_WriteCompareValue(77);
    0C48: 50 4D    MOV   A,0x4D
    0C4A: 7C 0B 05 LCALL _Counter8_WriteCompareValue
(0042)   Counter8_Start();
    0C4D: 7C 0A FA LCALL _Counter8_Start
(0043)   UART_Start(UART_PARITY_NONE);
    0C50: 50 00    MOV   A,0x0
    0C52: 7C 03 D9 LCALL _UART_Start
(0044)   
(0045)   LCD_Start();
    0C55: 7C 09 3C LCALL _LCD_Start|_LCD_Init|LCD_Init
(0046)   PGA_1_Start(PGA_1_MEDPOWER);
    0C58: 50 02    MOV   A,0x2
    0C5A: 7C 08 07 LCALL _PGA_1_SetPower|_PGA_1_Start|PGA_1_Start|PGA_1_SetPower
(0047)   PGA_2_Start(PGA_2_MEDPOWER);
    0C5D: 50 02    MOV   A,0x2
    0C5F: 7C 07 D3 LCALL PGA_2_SetPower|_PGA_2_Start|_PGA_2_SetPower|PGA_2_Start
(0048)   PGA_3_Start(PGA_3_MEDPOWER);
    0C62: 50 02    MOV   A,0x2
    0C64: 7C 07 9F LCALL _PGA_3_SetPower|_PGA_3_Start|PGA_3_Start
(0049)   
(0050)   TRIADC_Start(TRIADC_HIGHPOWER);
    0C67: 50 03    MOV   A,0x3
    0C69: 7C 06 89 LCALL _TRIADC_Start|TRIADC_SetPower|_TRIADC_SetPower
(0051)   TRIADC_SetResolution(12);
    0C6C: 50 0C    MOV   A,0xC
    0C6E: 7C 07 6F LCALL _TRIADC_SetResolution
(0052)   TRIADC_GetSamples(0);
    0C71: 50 00    MOV   A,0x0
    0C73: 7C 06 C0 LCALL _TRIADC_GetSamples
    0C76: 20       POP   X
    0C77: 80 43    JMP   0x0CBB
(0053)   
(0054)   while (1) {
(0055)       while (TRIADC_fIsDataAvailable() == 0);
    0C79: 10       PUSH  X
    0C7A: 7C 07 3F LCALL TRIADC_fIsData|TRIADC_fIsDataAvailable|_TRIADC_fIsData|_TRIADC_fIsDataAvailable
    0C7D: 20       POP   X
    0C7E: 39 00    CMP   A,0x0
    0C80: AF F8    JZ    0x0C79
(0056)       putData(TRIADC_iGetData1(), TRIADC_iGetData2(), TRIADC_iGetData3());
    0C82: 10       PUSH  X
    0C83: 7C 07 4C LCALL _TRIADC_iGetData1
    0C86: 5A 05    MOV   [__r0],X
    0C88: 20       POP   X
    0C89: 54 01    MOV   [X+1],A
    0C8B: 51 05    MOV   A,[__r0]
    0C8D: 54 00    MOV   [X+0],A
    0C8F: 10       PUSH  X
    0C90: 7C 07 59 LCALL _TRIADC_iGetData2
    0C93: 5A 05    MOV   [__r0],X
    0C95: 20       POP   X
    0C96: 54 03    MOV   [X+3],A
    0C98: 51 05    MOV   A,[__r0]
    0C9A: 54 02    MOV   [X+2],A
    0C9C: 10       PUSH  X
    0C9D: 7C 07 66 LCALL _TRIADC_iGetData3
    0CA0: 5A 05    MOV   [__r0],X
    0CA2: 53 04    MOV   [__r1],A
    0CA4: 20       POP   X
    0CA5: 51 05    MOV   A,[__r0]
    0CA7: 08       PUSH  A
    0CA8: 51 04    MOV   A,[__r1]
    0CAA: 08       PUSH  A
    0CAB: 52 02    MOV   A,[X+2]
    0CAD: 08       PUSH  A
    0CAE: 52 03    MOV   A,[X+3]
    0CB0: 08       PUSH  A
    0CB1: 52 00    MOV   A,[X+0]
    0CB3: 08       PUSH  A
    0CB4: 52 01    MOV   A,[X+1]
    0CB6: 08       PUSH  A
    0CB7: 9E 7F    CALL  __UserModules_end|_putData|__text_start|_putData
    0CB9: 38 FA    ADD   SP,0xFA
(0057)   }
    0CBB: 8F BD    JMP   0x0C79
(0058) }    0CBD: 38 FC    ADD   SP,0xFC
    0CBF: 20       POP   X
    0CC0: 8F FF    JMP   0x0CC0
_itoa:
    0D43: 10       PUSH  X
    0D44: 4F       MOV   X,SP
    0D45: 38 09    ADD   SP,0x9
    0D47: 52 FA    MOV   A,[X-6]
    0D49: 54 03    MOV   [X+3],A
    0D4B: 52 F9    MOV   A,[X-7]
    0D4D: 54 02    MOV   [X+2],A
    0D4F: 3D F9 00 CMP   [X-7],0x0
    0D52: B0 22    JNZ   0x0D75
    0D54: 3D FA 00 CMP   [X-6],0x0
    0D57: B0 1D    JNZ   0x0D75
    0D59: 52 FC    MOV   A,[X-4]
    0D5B: 53 04    MOV   [__r1],A
    0D5D: 50 30    MOV   A,0x30
    0D5F: 3F 04    MVI   [__r1],A
    0D61: 52 FC    MOV   A,[X-4]
    0D63: 01 01    ADD   A,0x1
    0D65: 53 04    MOV   [__r1],A
    0D67: 50 00    MOV   A,0x0
    0D69: 3F 04    MVI   [__r1],A
    0D6B: 52 FC    MOV   A,[X-4]
    0D6D: 53 04    MOV   [__r1],A
    0D6F: 52 FB    MOV   A,[X-5]
    0D71: 53 05    MOV   [__r0],A
    0D73: 81 48    JMP   0x0EBC
    0D75: 52 FA    MOV   A,[X-6]
    0D77: 11 00    SUB   A,0x0
    0D79: 52 F9    MOV   A,[X-7]
    0D7B: 31 80    XOR   A,0x80
    0D7D: 19 80    SBB   A,0x80
    0D7F: D0 26    JNC   0x0DA6
    0D81: 3D F7 00 CMP   [X-9],0x0
    0D84: B0 21    JNZ   0x0DA6
    0D86: 3D F8 0A CMP   [X-8],0xA
    0D89: B0 1C    JNZ   0x0DA6
    0D8B: 56 06 01 MOV   [X+6],0x1
    0D8E: 52 03    MOV   A,[X+3]
    0D90: 73       CPL   A
    0D91: 53 04    MOV   [__r1],A
    0D93: 52 02    MOV   A,[X+2]
    0D95: 73       CPL   A
    0D96: 53 05    MOV   [__r0],A
    0D98: 51 04    MOV   A,[__r1]
    0D9A: 01 01    ADD   A,0x1
    0D9C: 54 03    MOV   [X+3],A
    0D9E: 51 05    MOV   A,[__r0]
    0DA0: 09 00    ADC   A,0x0
    0DA2: 54 02    MOV   [X+2],A
    0DA4: 80 04    JMP   0x0DA9
    0DA6: 56 06 00 MOV   [X+6],0x0
    0DA9: 52 FC    MOV   A,[X-4]
    0DAB: 54 01    MOV   [X+1],A
    0DAD: 52 F7    MOV   A,[X-9]
    0DAF: 08       PUSH  A
    0DB0: 52 F8    MOV   A,[X-8]
    0DB2: 08       PUSH  A
    0DB3: 52 02    MOV   A,[X+2]
    0DB5: 08       PUSH  A
    0DB6: 52 03    MOV   A,[X+3]
    0DB8: 08       PUSH  A
    0DB9: 7C 0D 0C LCALL 0x0D0C
    0DBC: 38 FE    ADD   SP,0xFE
    0DBE: 18       POP   A
    0DBF: 53 04    MOV   [__r1],A
    0DC1: 18       POP   A
    0DC2: 53 05    MOV   [__r0],A
    0DC4: 51 04    MOV   A,[__r1]
    0DC6: 54 08    MOV   [X+8],A
    0DC8: 51 05    MOV   A,[__r0]
    0DCA: 54 07    MOV   [X+7],A
    0DCC: 50 09    MOV   A,0x9
    0DCE: 13 08    SUB   A,[X+8]
    0DD0: 52 07    MOV   A,[X+7]
    0DD2: 31 80    XOR   A,0x80
    0DD4: 53 02    MOV   [__rX],A
    0DD6: 50 80    MOV   A,0x80
    0DD8: 1A 02    SBB   A,[__rX]
    0DDA: C0 1D    JC    0x0DF8
    0DDC: 52 01    MOV   A,[X+1]
    0DDE: 53 04    MOV   [__r1],A
    0DE0: 52 00    MOV   A,[X+0]
    0DE2: 53 05    MOV   [__r0],A
    0DE4: 51 04    MOV   A,[__r1]
    0DE6: 01 01    ADD   A,0x1
    0DE8: 54 01    MOV   [X+1],A
    0DEA: 51 05    MOV   A,[__r0]
    0DEC: 09 00    ADC   A,0x0
    0DEE: 54 00    MOV   [X+0],A
    0DF0: 52 08    MOV   A,[X+8]
    0DF2: 01 30    ADD   A,0x30
    0DF4: 3F 04    MVI   [__r1],A
    0DF6: 80 1B    JMP   0x0E12
    0DF8: 52 01    MOV   A,[X+1]
    0DFA: 53 04    MOV   [__r1],A
    0DFC: 52 00    MOV   A,[X+0]
    0DFE: 53 05    MOV   [__r0],A
    0E00: 51 04    MOV   A,[__r1]
    0E02: 01 01    ADD   A,0x1
    0E04: 54 01    MOV   [X+1],A
    0E06: 51 05    MOV   A,[__r0]
    0E08: 09 00    ADC   A,0x0
    0E0A: 54 00    MOV   [X+0],A
    0E0C: 52 08    MOV   A,[X+8]
    0E0E: 01 57    ADD   A,0x57
    0E10: 3F 04    MVI   [__r1],A
    0E12: 52 F7    MOV   A,[X-9]
    0E14: 08       PUSH  A
    0E15: 52 F8    MOV   A,[X-8]
    0E17: 08       PUSH  A
    0E18: 52 02    MOV   A,[X+2]
    0E1A: 08       PUSH  A
    0E1B: 52 03    MOV   A,[X+3]
    0E1D: 08       PUSH  A
    0E1E: 7C 0D 0C LCALL 0x0D0C
    0E21: 18       POP   A
    0E22: 54 03    MOV   [X+3],A
    0E24: 18       POP   A
    0E25: 54 02    MOV   [X+2],A
    0E27: 38 FE    ADD   SP,0xFE
    0E29: 3D 02 00 CMP   [X+2],0x0
    0E2C: BF 80    JNZ   0x0DAD
    0E2E: 3D 03 00 CMP   [X+3],0x0
    0E31: BF 7B    JNZ   0x0DAD
    0E33: 3D 06 00 CMP   [X+6],0x0
    0E36: A0 19    JZ    0x0E50
    0E38: 52 01    MOV   A,[X+1]
    0E3A: 53 04    MOV   [__r1],A
    0E3C: 52 00    MOV   A,[X+0]
    0E3E: 53 05    MOV   [__r0],A
    0E40: 51 04    MOV   A,[__r1]
    0E42: 01 01    ADD   A,0x1
    0E44: 54 01    MOV   [X+1],A
    0E46: 51 05    MOV   A,[__r0]
    0E48: 09 00    ADC   A,0x0
    0E4A: 54 00    MOV   [X+0],A
    0E4C: 50 2D    MOV   A,0x2D
    0E4E: 3F 04    MVI   [__r1],A
    0E50: 52 01    MOV   A,[X+1]
    0E52: 53 04    MOV   [__r1],A
    0E54: 52 00    MOV   A,[X+0]
    0E56: 53 05    MOV   [__r0],A
    0E58: 51 04    MOV   A,[__r1]
    0E5A: 01 FF    ADD   A,0xFF
    0E5C: 54 01    MOV   [X+1],A
    0E5E: 51 05    MOV   A,[__r0]
    0E60: 09 FF    ADC   A,0xFF
    0E62: 54 00    MOV   [X+0],A
    0E64: 50 00    MOV   A,0x0
    0E66: 3F 04    MVI   [__r1],A
    0E68: 52 FC    MOV   A,[X-4]
    0E6A: 54 05    MOV   [X+5],A
    0E6C: 80 3D    JMP   0x0EAA
    0E6E: 52 05    MOV   A,[X+5]
    0E70: 53 04    MOV   [__r1],A
    0E72: 3E 04    MVI   A,[__r1]
    0E74: 54 06    MOV   [X+6],A
    0E76: 52 05    MOV   A,[X+5]
    0E78: 53 04    MOV   [__r1],A
    0E7A: 52 04    MOV   A,[X+4]
    0E7C: 53 05    MOV   [__r0],A
    0E7E: 51 04    MOV   A,[__r1]
    0E80: 01 01    ADD   A,0x1
    0E82: 54 05    MOV   [X+5],A
    0E84: 51 05    MOV   A,[__r0]
    0E86: 09 00    ADC   A,0x0
    0E88: 54 04    MOV   [X+4],A
    0E8A: 52 01    MOV   A,[X+1]
    0E8C: 53 03    MOV   [__r3],A
    0E8E: 3E 03    MVI   A,[__r3]
    0E90: 3F 04    MVI   [__r1],A
    0E92: 52 01    MOV   A,[X+1]
    0E94: 53 04    MOV   [__r1],A
    0E96: 52 00    MOV   A,[X+0]
    0E98: 53 05    MOV   [__r0],A
    0E9A: 51 04    MOV   A,[__r1]
    0E9C: 01 FF    ADD   A,0xFF
    0E9E: 54 01    MOV   [X+1],A
    0EA0: 51 05    MOV   A,[__r0]
    0EA2: 09 FF    ADC   A,0xFF
    0EA4: 54 00    MOV   [X+0],A
    0EA6: 52 06    MOV   A,[X+6]
    0EA8: 3F 04    MVI   [__r1],A
    0EAA: 52 01    MOV   A,[X+1]
    0EAC: 53 05    MOV   [__r0],A
    0EAE: 52 05    MOV   A,[X+5]
    0EB0: 3A 05    CMP   A,[__r0]
    0EB2: CF BB    JC    0x0E6E
    0EB4: 52 FC    MOV   A,[X-4]
    0EB6: 53 04    MOV   [__r1],A
    0EB8: 52 FB    MOV   A,[X-5]
    0EBA: 53 05    MOV   [__r0],A
    0EBC: 38 F7    ADD   SP,0xF7
    0EBE: 20       POP   X
    0EBF: 7F       RET   
